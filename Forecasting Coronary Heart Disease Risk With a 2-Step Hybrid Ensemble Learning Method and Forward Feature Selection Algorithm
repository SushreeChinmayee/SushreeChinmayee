{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SushreeChinmayee/SushreeChinmayee/blob/main/MLProject_2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vwRLsXnzlstk",
        "outputId": "02c8be15-699c-437a-8ece-db10e8a7939e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sEaPVAmumFxI",
        "outputId": "4a80fa7f-94f6-4bee-fd6a-9a62f497cb72"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.8/dist-packages (0.8.1)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.8/dist-packages (from imbalanced-learn) (1.2.0)\n",
            "Requirement already satisfied: scipy>=0.19.1 in /usr/local/lib/python3.8/dist-packages (from imbalanced-learn) (1.7.3)\n",
            "Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.8/dist-packages (from imbalanced-learn) (1.21.6)\n",
            "Requirement already satisfied: scikit-learn>=0.24 in /usr/local/lib/python3.8/dist-packages (from imbalanced-learn) (1.0.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from scikit-learn>=0.24->imbalanced-learn) (3.1.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install imbalanced-learn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QWtcI3h8meSV"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import MinMaxScaler, power_transform\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "import imblearn\n",
        "\n",
        "\n",
        "# Oversample and plot imbalanced dataset with SMOTE\n",
        "from collections import Counter\n",
        "from sklearn.datasets import make_classification\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from matplotlib import pyplot\n",
        "from numpy import where\n",
        "\n",
        "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
        "\n",
        "\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.linear_model import Lasso, LogisticRegression\n",
        "from sklearn.feature_selection import SelectFromModel\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn import tree\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.ensemble import ExtraTreesClassifier\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "from sklearn.metrics import *\n",
        "\n",
        "import xgboost as xgb\n",
        "\n",
        "import time\n",
        "\n",
        "\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q944MH51nF1m"
      },
      "outputs": [],
      "source": [
        "projectdata = pd.read_csv('/content/drive/MyDrive/ML Project 1st sem_phd/input data/cvd_pred_data_new.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E-s3Hi6drG_3"
      },
      "source": [
        "# Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "88wO6zjRnJFV"
      },
      "outputs": [],
      "source": [
        "######### OverSampling\n",
        "\n",
        "X=projectdata.drop(['TenYearCHD'], axis=1)\n",
        "y=projectdata['TenYearCHD']\n",
        "\n",
        "# transform the dataset\n",
        "oversample = SMOTE()\n",
        "X, y = oversample.fit_resample(X, y)\n",
        "\n",
        "projectdata=pd.concat([X,y],axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "H7v-dNEFojXT",
        "outputId": "2816cdf0-635c-4829-c6dc-f836cb95a9e3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     male       age  education  currentSmoker  cigsPerDay  \\\n",
              "male             1.000000 -0.074046   0.060132       0.274403    0.349207   \n",
              "age             -0.074046  1.000000  -0.195422      -0.274535   -0.209653   \n",
              "education        0.060132 -0.195422   1.000000       0.044655    0.012357   \n",
              "currentSmoker    0.274403 -0.274535   0.044655       1.000000    0.788676   \n",
              "cigsPerDay       0.349207 -0.209653   0.012357       0.788676    1.000000   \n",
              "BPMeds          -0.035961  0.094730   0.016786      -0.037894   -0.042995   \n",
              "prevalentStroke  0.002596  0.033858  -0.018297      -0.019827   -0.026468   \n",
              "prevalentHyp    -0.052244  0.321170  -0.073662      -0.145067   -0.097062   \n",
              "diabetes        -0.023105  0.083899  -0.040767      -0.084457   -0.046725   \n",
              "totChol         -0.090558  0.212343  -0.004868      -0.064025   -0.028265   \n",
              "sysBP           -0.084265  0.418994  -0.148299      -0.172442   -0.092202   \n",
              "diaBP            0.008930  0.209334  -0.062246      -0.134996   -0.061991   \n",
              "BMI              0.031189  0.138982  -0.136889      -0.183448   -0.104874   \n",
              "heartRate       -0.094932 -0.019614  -0.053832       0.075343    0.094390   \n",
              "glucose         -0.042400  0.128338  -0.049399      -0.113200   -0.057481   \n",
              "TenYearCHD      -0.065967  0.305757  -0.205362      -0.086746    0.043922   \n",
              "\n",
              "                   BPMeds  prevalentStroke  prevalentHyp  diabetes   totChol  \\\n",
              "male            -0.035961         0.002596     -0.052244 -0.023105 -0.090558   \n",
              "age              0.094730         0.033858      0.321170  0.083899  0.212343   \n",
              "education        0.016786        -0.018297     -0.073662 -0.040767 -0.004868   \n",
              "currentSmoker   -0.037894        -0.019827     -0.145067 -0.084457 -0.064025   \n",
              "cigsPerDay      -0.042995        -0.026468     -0.097062 -0.046725 -0.028265   \n",
              "BPMeds           1.000000         0.115600      0.203013  0.048688  0.062740   \n",
              "prevalentStroke  0.115600         1.000000      0.052513  0.003612 -0.003719   \n",
              "prevalentHyp     0.203013         0.052513      1.000000  0.070627  0.142035   \n",
              "diabetes         0.048688         0.003612      0.070627  1.000000  0.051987   \n",
              "totChol          0.062740        -0.003719      0.142035  0.051987  1.000000   \n",
              "sysBP            0.184963         0.029496      0.703164  0.114045  0.194916   \n",
              "diaBP            0.136800         0.024639      0.614608  0.042776  0.142786   \n",
              "BMI              0.075001         0.015748      0.278067  0.102475  0.111155   \n",
              "heartRate        0.033482        -0.014058      0.138597  0.065090  0.100301   \n",
              "glucose          0.045549         0.006049      0.090306  0.749410  0.080345   \n",
              "TenYearCHD      -0.033972        -0.007089      0.133999  0.061532  0.098272   \n",
              "\n",
              "                    sysBP     diaBP       BMI  heartRate   glucose  TenYearCHD  \n",
              "male            -0.084265  0.008930  0.031189  -0.094932 -0.042400   -0.065967  \n",
              "age              0.418994  0.209334  0.138982  -0.019614  0.128338    0.305757  \n",
              "education       -0.148299 -0.062246 -0.136889  -0.053832 -0.049399   -0.205362  \n",
              "currentSmoker   -0.172442 -0.134996 -0.183448   0.075343 -0.113200   -0.086746  \n",
              "cigsPerDay      -0.092202 -0.061991 -0.104874   0.094390 -0.057481    0.043922  \n",
              "BPMeds           0.184963  0.136800  0.075001   0.033482  0.045549   -0.033972  \n",
              "prevalentStroke  0.029496  0.024639  0.015748  -0.014058  0.006049   -0.007089  \n",
              "prevalentHyp     0.703164  0.614608  0.278067   0.138597  0.090306    0.133999  \n",
              "diabetes         0.114045  0.042776  0.102475   0.065090  0.749410    0.061532  \n",
              "totChol          0.194916  0.142786  0.111155   0.100301  0.080345    0.098272  \n",
              "sysBP            1.000000  0.801473  0.316473   0.170805  0.165978    0.275353  \n",
              "diaBP            0.801473  1.000000  0.360975   0.176404  0.068661    0.202888  \n",
              "BMI              0.316473  0.360975  1.000000   0.076311  0.111574    0.098726  \n",
              "heartRate        0.170805  0.176404  0.076311   1.000000  0.085710    0.008680  \n",
              "glucose          0.165978  0.068661  0.111574   0.085710  1.000000    0.115251  \n",
              "TenYearCHD       0.275353  0.202888  0.098726   0.008680  0.115251    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cd41b5ff-b644-4744-9e5c-895f51ce3cae\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>male</th>\n",
              "      <th>age</th>\n",
              "      <th>education</th>\n",
              "      <th>currentSmoker</th>\n",
              "      <th>cigsPerDay</th>\n",
              "      <th>BPMeds</th>\n",
              "      <th>prevalentStroke</th>\n",
              "      <th>prevalentHyp</th>\n",
              "      <th>diabetes</th>\n",
              "      <th>totChol</th>\n",
              "      <th>sysBP</th>\n",
              "      <th>diaBP</th>\n",
              "      <th>BMI</th>\n",
              "      <th>heartRate</th>\n",
              "      <th>glucose</th>\n",
              "      <th>TenYearCHD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.074046</td>\n",
              "      <td>0.060132</td>\n",
              "      <td>0.274403</td>\n",
              "      <td>0.349207</td>\n",
              "      <td>-0.035961</td>\n",
              "      <td>0.002596</td>\n",
              "      <td>-0.052244</td>\n",
              "      <td>-0.023105</td>\n",
              "      <td>-0.090558</td>\n",
              "      <td>-0.084265</td>\n",
              "      <td>0.008930</td>\n",
              "      <td>0.031189</td>\n",
              "      <td>-0.094932</td>\n",
              "      <td>-0.042400</td>\n",
              "      <td>-0.065967</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>-0.074046</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.195422</td>\n",
              "      <td>-0.274535</td>\n",
              "      <td>-0.209653</td>\n",
              "      <td>0.094730</td>\n",
              "      <td>0.033858</td>\n",
              "      <td>0.321170</td>\n",
              "      <td>0.083899</td>\n",
              "      <td>0.212343</td>\n",
              "      <td>0.418994</td>\n",
              "      <td>0.209334</td>\n",
              "      <td>0.138982</td>\n",
              "      <td>-0.019614</td>\n",
              "      <td>0.128338</td>\n",
              "      <td>0.305757</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>education</th>\n",
              "      <td>0.060132</td>\n",
              "      <td>-0.195422</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.044655</td>\n",
              "      <td>0.012357</td>\n",
              "      <td>0.016786</td>\n",
              "      <td>-0.018297</td>\n",
              "      <td>-0.073662</td>\n",
              "      <td>-0.040767</td>\n",
              "      <td>-0.004868</td>\n",
              "      <td>-0.148299</td>\n",
              "      <td>-0.062246</td>\n",
              "      <td>-0.136889</td>\n",
              "      <td>-0.053832</td>\n",
              "      <td>-0.049399</td>\n",
              "      <td>-0.205362</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>currentSmoker</th>\n",
              "      <td>0.274403</td>\n",
              "      <td>-0.274535</td>\n",
              "      <td>0.044655</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.788676</td>\n",
              "      <td>-0.037894</td>\n",
              "      <td>-0.019827</td>\n",
              "      <td>-0.145067</td>\n",
              "      <td>-0.084457</td>\n",
              "      <td>-0.064025</td>\n",
              "      <td>-0.172442</td>\n",
              "      <td>-0.134996</td>\n",
              "      <td>-0.183448</td>\n",
              "      <td>0.075343</td>\n",
              "      <td>-0.113200</td>\n",
              "      <td>-0.086746</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cigsPerDay</th>\n",
              "      <td>0.349207</td>\n",
              "      <td>-0.209653</td>\n",
              "      <td>0.012357</td>\n",
              "      <td>0.788676</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.042995</td>\n",
              "      <td>-0.026468</td>\n",
              "      <td>-0.097062</td>\n",
              "      <td>-0.046725</td>\n",
              "      <td>-0.028265</td>\n",
              "      <td>-0.092202</td>\n",
              "      <td>-0.061991</td>\n",
              "      <td>-0.104874</td>\n",
              "      <td>0.094390</td>\n",
              "      <td>-0.057481</td>\n",
              "      <td>0.043922</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BPMeds</th>\n",
              "      <td>-0.035961</td>\n",
              "      <td>0.094730</td>\n",
              "      <td>0.016786</td>\n",
              "      <td>-0.037894</td>\n",
              "      <td>-0.042995</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.115600</td>\n",
              "      <td>0.203013</td>\n",
              "      <td>0.048688</td>\n",
              "      <td>0.062740</td>\n",
              "      <td>0.184963</td>\n",
              "      <td>0.136800</td>\n",
              "      <td>0.075001</td>\n",
              "      <td>0.033482</td>\n",
              "      <td>0.045549</td>\n",
              "      <td>-0.033972</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>prevalentStroke</th>\n",
              "      <td>0.002596</td>\n",
              "      <td>0.033858</td>\n",
              "      <td>-0.018297</td>\n",
              "      <td>-0.019827</td>\n",
              "      <td>-0.026468</td>\n",
              "      <td>0.115600</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.052513</td>\n",
              "      <td>0.003612</td>\n",
              "      <td>-0.003719</td>\n",
              "      <td>0.029496</td>\n",
              "      <td>0.024639</td>\n",
              "      <td>0.015748</td>\n",
              "      <td>-0.014058</td>\n",
              "      <td>0.006049</td>\n",
              "      <td>-0.007089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>prevalentHyp</th>\n",
              "      <td>-0.052244</td>\n",
              "      <td>0.321170</td>\n",
              "      <td>-0.073662</td>\n",
              "      <td>-0.145067</td>\n",
              "      <td>-0.097062</td>\n",
              "      <td>0.203013</td>\n",
              "      <td>0.052513</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.070627</td>\n",
              "      <td>0.142035</td>\n",
              "      <td>0.703164</td>\n",
              "      <td>0.614608</td>\n",
              "      <td>0.278067</td>\n",
              "      <td>0.138597</td>\n",
              "      <td>0.090306</td>\n",
              "      <td>0.133999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>diabetes</th>\n",
              "      <td>-0.023105</td>\n",
              "      <td>0.083899</td>\n",
              "      <td>-0.040767</td>\n",
              "      <td>-0.084457</td>\n",
              "      <td>-0.046725</td>\n",
              "      <td>0.048688</td>\n",
              "      <td>0.003612</td>\n",
              "      <td>0.070627</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.051987</td>\n",
              "      <td>0.114045</td>\n",
              "      <td>0.042776</td>\n",
              "      <td>0.102475</td>\n",
              "      <td>0.065090</td>\n",
              "      <td>0.749410</td>\n",
              "      <td>0.061532</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>totChol</th>\n",
              "      <td>-0.090558</td>\n",
              "      <td>0.212343</td>\n",
              "      <td>-0.004868</td>\n",
              "      <td>-0.064025</td>\n",
              "      <td>-0.028265</td>\n",
              "      <td>0.062740</td>\n",
              "      <td>-0.003719</td>\n",
              "      <td>0.142035</td>\n",
              "      <td>0.051987</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.194916</td>\n",
              "      <td>0.142786</td>\n",
              "      <td>0.111155</td>\n",
              "      <td>0.100301</td>\n",
              "      <td>0.080345</td>\n",
              "      <td>0.098272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sysBP</th>\n",
              "      <td>-0.084265</td>\n",
              "      <td>0.418994</td>\n",
              "      <td>-0.148299</td>\n",
              "      <td>-0.172442</td>\n",
              "      <td>-0.092202</td>\n",
              "      <td>0.184963</td>\n",
              "      <td>0.029496</td>\n",
              "      <td>0.703164</td>\n",
              "      <td>0.114045</td>\n",
              "      <td>0.194916</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.801473</td>\n",
              "      <td>0.316473</td>\n",
              "      <td>0.170805</td>\n",
              "      <td>0.165978</td>\n",
              "      <td>0.275353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>diaBP</th>\n",
              "      <td>0.008930</td>\n",
              "      <td>0.209334</td>\n",
              "      <td>-0.062246</td>\n",
              "      <td>-0.134996</td>\n",
              "      <td>-0.061991</td>\n",
              "      <td>0.136800</td>\n",
              "      <td>0.024639</td>\n",
              "      <td>0.614608</td>\n",
              "      <td>0.042776</td>\n",
              "      <td>0.142786</td>\n",
              "      <td>0.801473</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.360975</td>\n",
              "      <td>0.176404</td>\n",
              "      <td>0.068661</td>\n",
              "      <td>0.202888</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BMI</th>\n",
              "      <td>0.031189</td>\n",
              "      <td>0.138982</td>\n",
              "      <td>-0.136889</td>\n",
              "      <td>-0.183448</td>\n",
              "      <td>-0.104874</td>\n",
              "      <td>0.075001</td>\n",
              "      <td>0.015748</td>\n",
              "      <td>0.278067</td>\n",
              "      <td>0.102475</td>\n",
              "      <td>0.111155</td>\n",
              "      <td>0.316473</td>\n",
              "      <td>0.360975</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.076311</td>\n",
              "      <td>0.111574</td>\n",
              "      <td>0.098726</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>heartRate</th>\n",
              "      <td>-0.094932</td>\n",
              "      <td>-0.019614</td>\n",
              "      <td>-0.053832</td>\n",
              "      <td>0.075343</td>\n",
              "      <td>0.094390</td>\n",
              "      <td>0.033482</td>\n",
              "      <td>-0.014058</td>\n",
              "      <td>0.138597</td>\n",
              "      <td>0.065090</td>\n",
              "      <td>0.100301</td>\n",
              "      <td>0.170805</td>\n",
              "      <td>0.176404</td>\n",
              "      <td>0.076311</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.085710</td>\n",
              "      <td>0.008680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>glucose</th>\n",
              "      <td>-0.042400</td>\n",
              "      <td>0.128338</td>\n",
              "      <td>-0.049399</td>\n",
              "      <td>-0.113200</td>\n",
              "      <td>-0.057481</td>\n",
              "      <td>0.045549</td>\n",
              "      <td>0.006049</td>\n",
              "      <td>0.090306</td>\n",
              "      <td>0.749410</td>\n",
              "      <td>0.080345</td>\n",
              "      <td>0.165978</td>\n",
              "      <td>0.068661</td>\n",
              "      <td>0.111574</td>\n",
              "      <td>0.085710</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.115251</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TenYearCHD</th>\n",
              "      <td>-0.065967</td>\n",
              "      <td>0.305757</td>\n",
              "      <td>-0.205362</td>\n",
              "      <td>-0.086746</td>\n",
              "      <td>0.043922</td>\n",
              "      <td>-0.033972</td>\n",
              "      <td>-0.007089</td>\n",
              "      <td>0.133999</td>\n",
              "      <td>0.061532</td>\n",
              "      <td>0.098272</td>\n",
              "      <td>0.275353</td>\n",
              "      <td>0.202888</td>\n",
              "      <td>0.098726</td>\n",
              "      <td>0.008680</td>\n",
              "      <td>0.115251</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd41b5ff-b644-4744-9e5c-895f51ce3cae')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cd41b5ff-b644-4744-9e5c-895f51ce3cae button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cd41b5ff-b644-4744-9e5c-895f51ce3cae');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "## Correlation check\n",
        "\n",
        "projectdata.corr()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 954
        },
        "id": "-W1raeO8ol6N",
        "outputId": "9b00b14c-5bcf-49ed-878c-613ccfe8c63b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f396c016070>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x1080 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "## Plot the correlation matrix\n",
        "\n",
        "#dataplot=sns.heatmap(projectdata.corr())\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(15,15))\n",
        "sns.heatmap(projectdata.corr(), annot=True, linewidths=.5, ax=ax)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hc2nGjMzpN7C",
        "outputId": "1d0fb6d5-9f1e-4e75-f66c-e3623efcbb5c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        feature   VIF_Score\n",
            "0  prevalentHyp    1.940415\n",
            "1         sysBP  107.539721\n",
            "2         diaBP  102.051809\n"
          ]
        }
      ],
      "source": [
        "X = projectdata[['prevalentHyp', 'sysBP','diaBP']]\n",
        "# VIF dataframe\n",
        "vif_data = pd.DataFrame()\n",
        "vif_data[\"feature\"] = X.columns\n",
        "# calculating VIF for each feature\n",
        "vif_data[\"VIF_Score\"] = [variance_inflation_factor(X.values, i)\n",
        "\t\t\t\t\t\tfor i in range(len(X.columns))]\n",
        "\n",
        "print(vif_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rE0H98YCqHPz",
        "outputId": "0a92efde-b00b-4e24-e3e5-f7591dc4e178"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  feature  VIF_Score\n",
            "0   diaBP  95.723678\n",
            "1   sysBP  95.723678\n"
          ]
        }
      ],
      "source": [
        "X = projectdata[['diaBP', 'sysBP']]\n",
        "# VIF dataframe\n",
        "vif_data = pd.DataFrame()\n",
        "vif_data[\"feature\"] = X.columns\n",
        "# calculating VIF for each feature\n",
        "vif_data[\"VIF_Score\"] = [variance_inflation_factor(X.values, i)\n",
        "\t\t\t\t\t\tfor i in range(len(X.columns))]\n",
        "\n",
        "print(vif_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dau4zIAdqIiI",
        "outputId": "c75d2f79-b2d6-4162-e976-bafe98f327fa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        feature  VIF_Score\n",
            "0         diaBP    1.72721\n",
            "1  prevalentHyp    1.72721\n"
          ]
        }
      ],
      "source": [
        "X = projectdata[['diaBP', 'prevalentHyp']]\n",
        "# VIF dataframe\n",
        "vif_data = pd.DataFrame()\n",
        "vif_data[\"feature\"] = X.columns\n",
        "\n",
        "# calculating VIF for each feature\n",
        "vif_data[\"VIF_Score\"] = [variance_inflation_factor(X.values, i)\n",
        "\t\t\t\t\t\tfor i in range(len(X.columns))]\n",
        "\n",
        "print(vif_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F4gdEcWfqIky",
        "outputId": "efde87a7-a32b-489c-9774-298828b1ff98"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        feature  VIF_Score\n",
            "0  prevalentHyp   1.820092\n",
            "1         sysBP   1.820092\n"
          ]
        }
      ],
      "source": [
        "X = projectdata[['prevalentHyp', 'sysBP']]\n",
        "# VIF dataframe\n",
        "vif_data = pd.DataFrame()\n",
        "vif_data[\"feature\"] = X.columns\n",
        "\n",
        "# calculating VIF for each feature\n",
        "vif_data[\"VIF_Score\"] = [variance_inflation_factor(X.values, i)\n",
        "\t\t\t\t\t\tfor i in range(len(X.columns))]\n",
        "\n",
        "print(vif_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cuL_31I7qInu",
        "outputId": "464be1b1-7c85-4f11-a3ed-8c61a9558dd1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "         feature       VIF\n",
            "0  currentSmoker  4.239049\n",
            "1     cigsPerDay  4.239049\n"
          ]
        }
      ],
      "source": [
        "X = projectdata[['currentSmoker', 'cigsPerDay']]\n",
        "# VIF dataframe\n",
        "vif_data = pd.DataFrame()\n",
        "vif_data[\"feature\"] = X.columns\n",
        "\n",
        "# calculating VIF for each feature\n",
        "vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i)\n",
        "\t\t\t\t\t\tfor i in range(len(X.columns))]\n",
        "\n",
        "print(vif_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uySn5DMVqIqk",
        "outputId": "2d5dde6b-6de1-4958-dc53-49f9ac81f273"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    feature       VIF\n",
            "0  diabetes  1.201266\n",
            "1   glucose  1.201266\n"
          ]
        }
      ],
      "source": [
        "X = projectdata[['diabetes', 'glucose']]\n",
        "# VIF dataframe\n",
        "vif_data = pd.DataFrame()\n",
        "vif_data[\"feature\"] = X.columns\n",
        "\n",
        "# calculating VIF for each feature\n",
        "vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i)\n",
        "\t\t\t\t\t\tfor i in range(len(X.columns))]\n",
        "\n",
        "print(vif_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jN30PZk_qIte"
      },
      "outputs": [],
      "source": [
        "## Dropping features (multicollinearity removal)\n",
        "\n",
        "projectdata_upd=projectdata.copy()\n",
        "projectdata_upd.drop(['sysBP','diabetes','currentSmoker','prevalentHyp'], axis=1,inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "zTZKNfpsqIwV",
        "outputId": "628be539-372a-4002-ed07-b6b3f1adf566"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              male          age    education   cigsPerDay       BPMeds  \\\n",
              "count  7188.000000  7188.000000  7188.000000  7188.000000  7188.000000   \n",
              "mean      0.378687    51.283806     1.809961     9.229132     0.023511   \n",
              "std       0.485094     8.229786     0.936290    11.761566     0.151532   \n",
              "min       0.000000    32.000000     1.000000     0.000000     0.000000   \n",
              "25%       0.000000    45.000000     1.000000     0.000000     0.000000   \n",
              "50%       0.000000    51.000000     2.000000     2.000000     0.000000   \n",
              "75%       1.000000    58.000000     2.000000    20.000000     0.000000   \n",
              "max       1.000000    70.000000     4.000000    70.000000     1.000000   \n",
              "\n",
              "       prevalentStroke      totChol        diaBP          BMI    heartRate  \\\n",
              "count      7188.000000  7188.000000  7188.000000  7188.000000  7188.000000   \n",
              "mean          0.003478   239.553144    84.687135    26.062803    75.862410   \n",
              "std           0.058876    44.367520    12.451930     3.945300    11.525212   \n",
              "min           0.000000   107.000000    48.000000    15.540000    44.000000   \n",
              "25%           0.000000   210.000000    76.108262    23.450000    68.000000   \n",
              "50%           0.000000   237.000000    83.152084    25.740000    75.000000   \n",
              "75%           0.000000   266.000000    91.918936    28.217949    82.000000   \n",
              "max           1.000000   696.000000   142.500000    56.800000   143.000000   \n",
              "\n",
              "           glucose   TenYearCHD  \n",
              "count  7188.000000  7188.000000  \n",
              "mean     84.255565     0.500000  \n",
              "std      29.932319     0.500035  \n",
              "min      40.000000     0.000000  \n",
              "25%      73.000000     0.000000  \n",
              "50%      80.000000     0.500000  \n",
              "75%      86.000000     1.000000  \n",
              "max     394.000000     1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b48701b9-2960-4fe6-b33e-4f4c63efc4c3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>male</th>\n",
              "      <th>age</th>\n",
              "      <th>education</th>\n",
              "      <th>cigsPerDay</th>\n",
              "      <th>BPMeds</th>\n",
              "      <th>prevalentStroke</th>\n",
              "      <th>totChol</th>\n",
              "      <th>diaBP</th>\n",
              "      <th>BMI</th>\n",
              "      <th>heartRate</th>\n",
              "      <th>glucose</th>\n",
              "      <th>TenYearCHD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>7188.000000</td>\n",
              "      <td>7188.000000</td>\n",
              "      <td>7188.000000</td>\n",
              "      <td>7188.000000</td>\n",
              "      <td>7188.000000</td>\n",
              "      <td>7188.000000</td>\n",
              "      <td>7188.000000</td>\n",
              "      <td>7188.000000</td>\n",
              "      <td>7188.000000</td>\n",
              "      <td>7188.000000</td>\n",
              "      <td>7188.000000</td>\n",
              "      <td>7188.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.378687</td>\n",
              "      <td>51.283806</td>\n",
              "      <td>1.809961</td>\n",
              "      <td>9.229132</td>\n",
              "      <td>0.023511</td>\n",
              "      <td>0.003478</td>\n",
              "      <td>239.553144</td>\n",
              "      <td>84.687135</td>\n",
              "      <td>26.062803</td>\n",
              "      <td>75.862410</td>\n",
              "      <td>84.255565</td>\n",
              "      <td>0.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.485094</td>\n",
              "      <td>8.229786</td>\n",
              "      <td>0.936290</td>\n",
              "      <td>11.761566</td>\n",
              "      <td>0.151532</td>\n",
              "      <td>0.058876</td>\n",
              "      <td>44.367520</td>\n",
              "      <td>12.451930</td>\n",
              "      <td>3.945300</td>\n",
              "      <td>11.525212</td>\n",
              "      <td>29.932319</td>\n",
              "      <td>0.500035</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>107.000000</td>\n",
              "      <td>48.000000</td>\n",
              "      <td>15.540000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>40.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>45.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>210.000000</td>\n",
              "      <td>76.108262</td>\n",
              "      <td>23.450000</td>\n",
              "      <td>68.000000</td>\n",
              "      <td>73.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>51.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>237.000000</td>\n",
              "      <td>83.152084</td>\n",
              "      <td>25.740000</td>\n",
              "      <td>75.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>0.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>58.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>266.000000</td>\n",
              "      <td>91.918936</td>\n",
              "      <td>28.217949</td>\n",
              "      <td>82.000000</td>\n",
              "      <td>86.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>696.000000</td>\n",
              "      <td>142.500000</td>\n",
              "      <td>56.800000</td>\n",
              "      <td>143.000000</td>\n",
              "      <td>394.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b48701b9-2960-4fe6-b33e-4f4c63efc4c3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b48701b9-2960-4fe6-b33e-4f4c63efc4c3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b48701b9-2960-4fe6-b33e-4f4c63efc4c3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "projectdata_upd.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QsYiliHTqIzD"
      },
      "outputs": [],
      "source": [
        "projectdata_nonbinary=projectdata_upd.drop(['male','BPMeds','prevalentStroke','TenYearCHD'], axis=1)\n",
        "project_binary=projectdata_upd[['male','BPMeds','prevalentStroke','TenYearCHD']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5DLjVN1MqI2e"
      },
      "outputs": [],
      "source": [
        "#### min-max scaler on newdata\n",
        "\n",
        "scaler_x = MinMaxScaler()\n",
        "X1 = scaler_x.fit_transform(projectdata_nonbinary.to_numpy())\n",
        "X1 = pd.DataFrame(X1, columns=projectdata_nonbinary.columns, index=projectdata_nonbinary.index)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LOjjzzUFqI44"
      },
      "outputs": [],
      "source": [
        "## power transform on new data\n",
        "\n",
        "for i in X1.columns.to_list():\n",
        "    z=X1[i].values.reshape(-1,1)\n",
        "    z1=power_transform(z)\n",
        "    X1[i]=pd.DataFrame(z1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yHhkzdBQqI7z"
      },
      "outputs": [],
      "source": [
        "## Concat new data with binary data to get the original data with scaling\n",
        "projectdata_trans=pd.concat([X1,project_binary], axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "S3E_dYTY0O3T",
        "outputId": "cfa837e4-0595-4dcc-9807-bead031b87df"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           age  education  cigsPerDay   totChol     diaBP       BMI  \\\n",
              "0    -1.496925   1.678884   -0.915167 -1.043546 -1.273456  0.347809   \n",
              "1    -0.639707   0.550419   -0.915167  0.326196 -0.211267  0.767566   \n",
              "2    -0.395861  -0.987380    1.169355  0.214126 -0.299572 -0.080900   \n",
              "3     1.179024   1.277376    1.515739 -0.257668  0.883772  0.733398   \n",
              "4    -0.639707   1.277376    1.296854  1.051510  0.044859 -0.742677   \n",
              "...        ...        ...         ...       ...       ...       ...   \n",
              "7183  1.299508   0.550419   -0.915167  1.634570 -0.532129 -1.238043   \n",
              "7184 -0.030919  -0.987380   -0.915167 -0.040568 -0.066445  0.765433   \n",
              "7185 -0.761801  -0.987380    1.515739  1.933445 -0.943522  0.789755   \n",
              "7186  1.299508  -0.987380   -0.915167  0.752790 -1.150025 -2.067592   \n",
              "7187 -0.761801  -0.987380   -0.367990 -0.638098 -0.241016  0.027474   \n",
              "\n",
              "      heartRate   glucose  male  BPMeds  prevalentStroke  TenYearCHD  \n",
              "0      0.454373 -0.165876     1       0                0           0  \n",
              "1      1.552311 -0.250942     0       0                0           0  \n",
              "2      0.023111 -0.819053     1       0                0           0  \n",
              "3     -0.964542  1.356913     0       0                0           1  \n",
              "4      0.850434  0.430514     0       0                0           0  \n",
              "...         ...       ...   ...     ...              ...         ...  \n",
              "7183   0.023111 -1.758708     0       0                0           1  \n",
              "7184  -0.964542 -0.083326     0       0                0           1  \n",
              "7185   0.286337 -0.003211     1       0                0           1  \n",
              "7186  -0.857310  0.953378     0       0                0           1  \n",
              "7187   0.112393 -1.032701     0       0                0           1  \n",
              "\n",
              "[7188 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8883fbc8-af92-475f-bcd4-038333959142\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>education</th>\n",
              "      <th>cigsPerDay</th>\n",
              "      <th>totChol</th>\n",
              "      <th>diaBP</th>\n",
              "      <th>BMI</th>\n",
              "      <th>heartRate</th>\n",
              "      <th>glucose</th>\n",
              "      <th>male</th>\n",
              "      <th>BPMeds</th>\n",
              "      <th>prevalentStroke</th>\n",
              "      <th>TenYearCHD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.496925</td>\n",
              "      <td>1.678884</td>\n",
              "      <td>-0.915167</td>\n",
              "      <td>-1.043546</td>\n",
              "      <td>-1.273456</td>\n",
              "      <td>0.347809</td>\n",
              "      <td>0.454373</td>\n",
              "      <td>-0.165876</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.639707</td>\n",
              "      <td>0.550419</td>\n",
              "      <td>-0.915167</td>\n",
              "      <td>0.326196</td>\n",
              "      <td>-0.211267</td>\n",
              "      <td>0.767566</td>\n",
              "      <td>1.552311</td>\n",
              "      <td>-0.250942</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.395861</td>\n",
              "      <td>-0.987380</td>\n",
              "      <td>1.169355</td>\n",
              "      <td>0.214126</td>\n",
              "      <td>-0.299572</td>\n",
              "      <td>-0.080900</td>\n",
              "      <td>0.023111</td>\n",
              "      <td>-0.819053</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.179024</td>\n",
              "      <td>1.277376</td>\n",
              "      <td>1.515739</td>\n",
              "      <td>-0.257668</td>\n",
              "      <td>0.883772</td>\n",
              "      <td>0.733398</td>\n",
              "      <td>-0.964542</td>\n",
              "      <td>1.356913</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.639707</td>\n",
              "      <td>1.277376</td>\n",
              "      <td>1.296854</td>\n",
              "      <td>1.051510</td>\n",
              "      <td>0.044859</td>\n",
              "      <td>-0.742677</td>\n",
              "      <td>0.850434</td>\n",
              "      <td>0.430514</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7183</th>\n",
              "      <td>1.299508</td>\n",
              "      <td>0.550419</td>\n",
              "      <td>-0.915167</td>\n",
              "      <td>1.634570</td>\n",
              "      <td>-0.532129</td>\n",
              "      <td>-1.238043</td>\n",
              "      <td>0.023111</td>\n",
              "      <td>-1.758708</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7184</th>\n",
              "      <td>-0.030919</td>\n",
              "      <td>-0.987380</td>\n",
              "      <td>-0.915167</td>\n",
              "      <td>-0.040568</td>\n",
              "      <td>-0.066445</td>\n",
              "      <td>0.765433</td>\n",
              "      <td>-0.964542</td>\n",
              "      <td>-0.083326</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7185</th>\n",
              "      <td>-0.761801</td>\n",
              "      <td>-0.987380</td>\n",
              "      <td>1.515739</td>\n",
              "      <td>1.933445</td>\n",
              "      <td>-0.943522</td>\n",
              "      <td>0.789755</td>\n",
              "      <td>0.286337</td>\n",
              "      <td>-0.003211</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7186</th>\n",
              "      <td>1.299508</td>\n",
              "      <td>-0.987380</td>\n",
              "      <td>-0.915167</td>\n",
              "      <td>0.752790</td>\n",
              "      <td>-1.150025</td>\n",
              "      <td>-2.067592</td>\n",
              "      <td>-0.857310</td>\n",
              "      <td>0.953378</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7187</th>\n",
              "      <td>-0.761801</td>\n",
              "      <td>-0.987380</td>\n",
              "      <td>-0.367990</td>\n",
              "      <td>-0.638098</td>\n",
              "      <td>-0.241016</td>\n",
              "      <td>0.027474</td>\n",
              "      <td>0.112393</td>\n",
              "      <td>-1.032701</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7188 rows × 12 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8883fbc8-af92-475f-bcd4-038333959142')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8883fbc8-af92-475f-bcd4-038333959142 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8883fbc8-af92-475f-bcd4-038333959142');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "projectdata_trans"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JX4m93IK0V1o"
      },
      "outputs": [],
      "source": [
        "class1= projectdata_trans[projectdata_trans.columns[:-1]]\n",
        "class2= projectdata_trans['TenYearCHD']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OpyRXbIV0XKv"
      },
      "outputs": [],
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9Newi-tJ1p6y"
      },
      "source": [
        "#### Feature selection using l1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ng0bV31E0XR1",
        "outputId": "7d90905b-ff8e-4cae-d4d4-45b284cda7e5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SelectFromModel(estimator=LogisticRegression(C=1, penalty='l1',\n",
              "                                             solver='liblinear'))"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "sel_ = SelectFromModel(LogisticRegression(solver = \"liblinear\", C=1, penalty='l1'))\n",
        "sel_.fit(x_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H_sRG9Rg0XVP",
        "outputId": "7d32efb3-19cb-41a6-f7dc-87b5bd8b71e3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
              "        True,  True])"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "sel_.get_support()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sw03KZ_r2Add"
      },
      "source": [
        "#### Random Forest Feature Importance"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LduYm6mt17TU"
      },
      "outputs": [],
      "source": [
        "#### Random Forest Feature Importance\n",
        "\n",
        "clf = RandomForestClassifier()\n",
        "clf.fit(class1, class2)\n",
        "importance=clf.feature_importances_\n",
        "\n",
        "\n",
        "list_imp=importance.tolist()\n",
        "features=class1.columns\n",
        "feature_imp_df = pd.DataFrame(np.column_stack([features,list_imp]),\n",
        "                               columns=['Features', 'Importances'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "MnDUDzyP17P4",
        "outputId": "f519a6bf-b6e1-4778-e7b6-a8b92b2319d1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Features Importances\n",
              "0               age    0.169313\n",
              "4             diaBP    0.160218\n",
              "3           totChol    0.144017\n",
              "5               BMI    0.128361\n",
              "7           glucose    0.125435\n",
              "6         heartRate    0.117779\n",
              "2        cigsPerDay    0.077889\n",
              "1         education    0.049755\n",
              "8              male    0.020381\n",
              "9            BPMeds    0.006068\n",
              "10  prevalentStroke    0.000783"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0ef91ca5-ffa6-4a8f-8764-16d9e91bc3cf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Features</th>\n",
              "      <th>Importances</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>age</td>\n",
              "      <td>0.169313</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>diaBP</td>\n",
              "      <td>0.160218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>totChol</td>\n",
              "      <td>0.144017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>BMI</td>\n",
              "      <td>0.128361</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>glucose</td>\n",
              "      <td>0.125435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>heartRate</td>\n",
              "      <td>0.117779</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>cigsPerDay</td>\n",
              "      <td>0.077889</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>education</td>\n",
              "      <td>0.049755</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>male</td>\n",
              "      <td>0.020381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>BPMeds</td>\n",
              "      <td>0.006068</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>prevalentStroke</td>\n",
              "      <td>0.000783</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ef91ca5-ffa6-4a8f-8764-16d9e91bc3cf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0ef91ca5-ffa6-4a8f-8764-16d9e91bc3cf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0ef91ca5-ffa6-4a8f-8764-16d9e91bc3cf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "feature_imp_df.sort_values(\"Importances\",  ascending = False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QvLmosrj17NQ"
      },
      "outputs": [],
      "source": [
        "### creating ranked feature list\n",
        "\n",
        "features_list = []\n",
        "\n",
        "for i in feature_imp_df[\"Features\"]:\n",
        "  features_list.append(i)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ewThJfvY17KP",
        "outputId": "1f815586-e25e-4c40-a856-473a00360872"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['age',\n",
              " 'education',\n",
              " 'cigsPerDay',\n",
              " 'totChol',\n",
              " 'diaBP',\n",
              " 'BMI',\n",
              " 'heartRate',\n",
              " 'glucose',\n",
              " 'male',\n",
              " 'BPMeds',\n",
              " 'prevalentStroke']"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "features_list"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1LUYDzh8IGOn"
      },
      "source": [
        "# KNN"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iSjm4Vi_IMvT"
      },
      "source": [
        "## KNN Default"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Eflp0LfE17H0"
      },
      "outputs": [],
      "source": [
        "model_name = [\"KNN\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  neigh = KNeighborsClassifier(n_neighbors=3)\n",
        "  neigh.fit(x_train, y_train)\n",
        "  y_predict = neigh.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = neigh.score(x_test, y_test)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_knn_default = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_knn_default.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_knn_default.csv\",  index = False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "zn0tAAUt17CP",
        "outputId": "f7ee53ee-2e51-410f-e284-b09c175b8d31"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-02c8bef0-0188-45ed-8e6b-edef7328b496\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.599444</td>\n",
              "      <td>0.609227</td>\n",
              "      <td>0.614227</td>\n",
              "      <td>0.604307</td>\n",
              "      <td>0.198468</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.618915</td>\n",
              "      <td>0.594675</td>\n",
              "      <td>0.549932</td>\n",
              "      <td>0.647343</td>\n",
              "      <td>0.242401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.655076</td>\n",
              "      <td>0.642651</td>\n",
              "      <td>0.610123</td>\n",
              "      <td>0.678843</td>\n",
              "      <td>0.312801</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.702364</td>\n",
              "      <td>0.718421</td>\n",
              "      <td>0.746922</td>\n",
              "      <td>0.692015</td>\n",
              "      <td>0.405084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.757302</td>\n",
              "      <td>0.776997</td>\n",
              "      <td>0.831737</td>\n",
              "      <td>0.729017</td>\n",
              "      <td>0.518683</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.773296</td>\n",
              "      <td>0.794192</td>\n",
              "      <td>0.860465</td>\n",
              "      <td>0.737397</td>\n",
              "      <td>0.553251</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.783727</td>\n",
              "      <td>0.808615</td>\n",
              "      <td>0.898769</td>\n",
              "      <td>0.734899</td>\n",
              "      <td>0.580941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.795549</td>\n",
              "      <td>0.820950</td>\n",
              "      <td>0.922025</td>\n",
              "      <td>0.739846</td>\n",
              "      <td>0.608833</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.795549</td>\n",
              "      <td>0.819853</td>\n",
              "      <td>0.915185</td>\n",
              "      <td>0.742508</td>\n",
              "      <td>0.606715</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.798331</td>\n",
              "      <td>0.822955</td>\n",
              "      <td>0.922025</td>\n",
              "      <td>0.743109</td>\n",
              "      <td>0.613732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.797636</td>\n",
              "      <td>0.822453</td>\n",
              "      <td>0.922025</td>\n",
              "      <td>0.742291</td>\n",
              "      <td>0.612507</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-02c8bef0-0188-45ed-8e6b-edef7328b496')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-02c8bef0-0188-45ed-8e6b-edef7328b496 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-02c8bef0-0188-45ed-8e6b-edef7328b496');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0         KNN                                              [age]  0.599444   \n",
              "1         KNN                                   [age, education]  0.618915   \n",
              "2         KNN                       [age, education, cigsPerDay]  0.655076   \n",
              "3         KNN              [age, education, cigsPerDay, totChol]  0.702364   \n",
              "4         KNN       [age, education, cigsPerDay, totChol, diaBP]  0.757302   \n",
              "5         KNN  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.773296   \n",
              "6         KNN  [age, education, cigsPerDay, totChol, diaBP, B...  0.783727   \n",
              "7         KNN  [age, education, cigsPerDay, totChol, diaBP, B...  0.795549   \n",
              "8         KNN  [age, education, cigsPerDay, totChol, diaBP, B...  0.795549   \n",
              "9         KNN  [age, education, cigsPerDay, totChol, diaBP, B...  0.798331   \n",
              "10        KNN  [age, education, cigsPerDay, totChol, diaBP, B...  0.797636   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.609227  0.614227   0.604307  0.198468  \n",
              "1   0.594675  0.549932   0.647343  0.242401  \n",
              "2   0.642651  0.610123   0.678843  0.312801  \n",
              "3   0.718421  0.746922   0.692015  0.405084  \n",
              "4   0.776997  0.831737   0.729017  0.518683  \n",
              "5   0.794192  0.860465   0.737397  0.553251  \n",
              "6   0.808615  0.898769   0.734899  0.580941  \n",
              "7   0.820950  0.922025   0.739846  0.608833  \n",
              "8   0.819853  0.915185   0.742508  0.606715  \n",
              "9   0.822955  0.922025   0.743109  0.613732  \n",
              "10  0.822453  0.922025   0.742291  0.612507  "
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "results_knn_default"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3-VV83aiIQ2w"
      },
      "source": [
        "## KNN HP"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9wjQTZY2Io2a"
      },
      "outputs": [],
      "source": [
        "params = {\n",
        "'n_neighbors':[2, 3, 5, 10],\n",
        "'weights':['uniform', 'distance'],\n",
        "'leaf_size':[5, 10, 20, 30, 40, 50]\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "feILuUYF16_g",
        "outputId": "61ae6132-1efb-4629-89a1-65040cc9b358"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 4 folds for each of 48 candidates, totalling 192 fits\n",
            "Iteration with: ['age']\n",
            "KNeighborsClassifier(leaf_size=5)\n",
            "Fitting 4 folds for each of 48 candidates, totalling 192 fits\n",
            "Iteration with: ['age', 'education']\n",
            "KNeighborsClassifier(leaf_size=5)\n",
            "Fitting 4 folds for each of 48 candidates, totalling 192 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay']\n",
            "KNeighborsClassifier(leaf_size=40, n_neighbors=10, weights='distance')\n",
            "Fitting 4 folds for each of 48 candidates, totalling 192 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol']\n",
            "KNeighborsClassifier(leaf_size=10, weights='distance')\n",
            "Fitting 4 folds for each of 48 candidates, totalling 192 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP']\n",
            "KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
            "Fitting 4 folds for each of 48 candidates, totalling 192 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI']\n",
            "KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
            "Fitting 4 folds for each of 48 candidates, totalling 192 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate']\n",
            "KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
            "Fitting 4 folds for each of 48 candidates, totalling 192 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose']\n",
            "KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
            "Fitting 4 folds for each of 48 candidates, totalling 192 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male']\n",
            "KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
            "Fitting 4 folds for each of 48 candidates, totalling 192 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male', 'BPMeds']\n",
            "KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
            "Fitting 4 folds for each of 48 candidates, totalling 192 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male', 'BPMeds', 'prevalentStroke']\n",
            "KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n"
          ]
        }
      ],
      "source": [
        "model_name = [\"KNN\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  neigh = KNeighborsClassifier()\n",
        "  model_hp = GridSearchCV(neigh,params,verbose=1,cv=4,n_jobs = -1,scoring='accuracy')\n",
        "  model_hp.fit(x_train,y_train)\n",
        "  print(\"Iteration with:\", features_list[:i])\n",
        "  print(model_hp.best_estimator_)\n",
        "  y_predict = model_hp.best_estimator_.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = accuracy_score(y_test, y_predict)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_knn_hp = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_knn_hp.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_knn_hp.csv\",  index = False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "fogK3rTxqI-v",
        "outputId": "d87955c8-2376-4698-b370-9c33c3491a1c"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-21d0964f-44f7-4daa-b60a-5dc8edb8d2c4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.623783</td>\n",
              "      <td>0.618746</td>\n",
              "      <td>0.600547</td>\n",
              "      <td>0.638081</td>\n",
              "      <td>0.248551</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.616134</td>\n",
              "      <td>0.592920</td>\n",
              "      <td>0.549932</td>\n",
              "      <td>0.643200</td>\n",
              "      <td>0.236512</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.659944</td>\n",
              "      <td>0.627002</td>\n",
              "      <td>0.562244</td>\n",
              "      <td>0.708621</td>\n",
              "      <td>0.329374</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.712796</td>\n",
              "      <td>0.728111</td>\n",
              "      <td>0.756498</td>\n",
              "      <td>0.701777</td>\n",
              "      <td>0.426015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.773992</td>\n",
              "      <td>0.791800</td>\n",
              "      <td>0.845417</td>\n",
              "      <td>0.744578</td>\n",
              "      <td>0.552102</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.801113</td>\n",
              "      <td>0.816901</td>\n",
              "      <td>0.872777</td>\n",
              "      <td>0.767750</td>\n",
              "      <td>0.607120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.821975</td>\n",
              "      <td>0.838791</td>\n",
              "      <td>0.911081</td>\n",
              "      <td>0.777130</td>\n",
              "      <td>0.652976</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.839360</td>\n",
              "      <td>0.856075</td>\n",
              "      <td>0.939808</td>\n",
              "      <td>0.786041</td>\n",
              "      <td>0.691475</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.841446</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.935705</td>\n",
              "      <td>0.790751</td>\n",
              "      <td>0.694058</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.838665</td>\n",
              "      <td>0.855000</td>\n",
              "      <td>0.935705</td>\n",
              "      <td>0.787112</td>\n",
              "      <td>0.689105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>KNN</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.838665</td>\n",
              "      <td>0.855000</td>\n",
              "      <td>0.935705</td>\n",
              "      <td>0.787112</td>\n",
              "      <td>0.689105</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21d0964f-44f7-4daa-b60a-5dc8edb8d2c4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-21d0964f-44f7-4daa-b60a-5dc8edb8d2c4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-21d0964f-44f7-4daa-b60a-5dc8edb8d2c4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0         KNN                                              [age]  0.623783   \n",
              "1         KNN                                   [age, education]  0.616134   \n",
              "2         KNN                       [age, education, cigsPerDay]  0.659944   \n",
              "3         KNN              [age, education, cigsPerDay, totChol]  0.712796   \n",
              "4         KNN       [age, education, cigsPerDay, totChol, diaBP]  0.773992   \n",
              "5         KNN  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.801113   \n",
              "6         KNN  [age, education, cigsPerDay, totChol, diaBP, B...  0.821975   \n",
              "7         KNN  [age, education, cigsPerDay, totChol, diaBP, B...  0.839360   \n",
              "8         KNN  [age, education, cigsPerDay, totChol, diaBP, B...  0.841446   \n",
              "9         KNN  [age, education, cigsPerDay, totChol, diaBP, B...  0.838665   \n",
              "10        KNN  [age, education, cigsPerDay, totChol, diaBP, B...  0.838665   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.618746  0.600547   0.638081  0.248551  \n",
              "1   0.592920  0.549932   0.643200  0.236512  \n",
              "2   0.627002  0.562244   0.708621  0.329374  \n",
              "3   0.728111  0.756498   0.701777  0.426015  \n",
              "4   0.791800  0.845417   0.744578  0.552102  \n",
              "5   0.816901  0.872777   0.767750  0.607120  \n",
              "6   0.838791  0.911081   0.777130  0.652976  \n",
              "7   0.856075  0.939808   0.786041  0.691475  \n",
              "8   0.857143  0.935705   0.790751  0.694058  \n",
              "9   0.855000  0.935705   0.787112  0.689105  \n",
              "10  0.855000  0.935705   0.787112  0.689105  "
            ]
          },
          "execution_count": 44,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "results_knn_hp"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-ek_SRY1RLA1"
      },
      "source": [
        "# SVM"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v6DxfHyWRNIu"
      },
      "source": [
        "## SVM Default"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "6ul695FV16CF",
        "outputId": "328173ab-f0b6-4e48-d9a6-ed45ac9e4a3b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-4a658075-e5a2-4f40-b8f7-71a685c01b35\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.642559</td>\n",
              "      <td>0.684275</td>\n",
              "      <td>0.761970</td>\n",
              "      <td>0.620959</td>\n",
              "      <td>0.290055</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.668289</td>\n",
              "      <td>0.697143</td>\n",
              "      <td>0.751026</td>\n",
              "      <td>0.650474</td>\n",
              "      <td>0.338884</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.675243</td>\n",
              "      <td>0.694971</td>\n",
              "      <td>0.727770</td>\n",
              "      <td>0.665000</td>\n",
              "      <td>0.350889</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.673853</td>\n",
              "      <td>0.704101</td>\n",
              "      <td>0.763338</td>\n",
              "      <td>0.653396</td>\n",
              "      <td>0.350860</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.694019</td>\n",
              "      <td>0.720102</td>\n",
              "      <td>0.774282</td>\n",
              "      <td>0.673008</td>\n",
              "      <td>0.390929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.697497</td>\n",
              "      <td>0.722753</td>\n",
              "      <td>0.775650</td>\n",
              "      <td>0.676611</td>\n",
              "      <td>0.397771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.707232</td>\n",
              "      <td>0.731334</td>\n",
              "      <td>0.783858</td>\n",
              "      <td>0.685407</td>\n",
              "      <td>0.417369</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.721836</td>\n",
              "      <td>0.744572</td>\n",
              "      <td>0.797538</td>\n",
              "      <td>0.698204</td>\n",
              "      <td>0.446895</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.728790</td>\n",
              "      <td>0.748387</td>\n",
              "      <td>0.793434</td>\n",
              "      <td>0.708181</td>\n",
              "      <td>0.459791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.728790</td>\n",
              "      <td>0.747736</td>\n",
              "      <td>0.790698</td>\n",
              "      <td>0.709202</td>\n",
              "      <td>0.459529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.728790</td>\n",
              "      <td>0.747736</td>\n",
              "      <td>0.790698</td>\n",
              "      <td>0.709202</td>\n",
              "      <td>0.459529</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a658075-e5a2-4f40-b8f7-71a685c01b35')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4a658075-e5a2-4f40-b8f7-71a685c01b35 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4a658075-e5a2-4f40-b8f7-71a685c01b35');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0         SVM                                              [age]  0.642559   \n",
              "1         SVM                                   [age, education]  0.668289   \n",
              "2         SVM                       [age, education, cigsPerDay]  0.675243   \n",
              "3         SVM              [age, education, cigsPerDay, totChol]  0.673853   \n",
              "4         SVM       [age, education, cigsPerDay, totChol, diaBP]  0.694019   \n",
              "5         SVM  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.697497   \n",
              "6         SVM  [age, education, cigsPerDay, totChol, diaBP, B...  0.707232   \n",
              "7         SVM  [age, education, cigsPerDay, totChol, diaBP, B...  0.721836   \n",
              "8         SVM  [age, education, cigsPerDay, totChol, diaBP, B...  0.728790   \n",
              "9         SVM  [age, education, cigsPerDay, totChol, diaBP, B...  0.728790   \n",
              "10        SVM  [age, education, cigsPerDay, totChol, diaBP, B...  0.728790   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.684275  0.761970   0.620959  0.290055  \n",
              "1   0.697143  0.751026   0.650474  0.338884  \n",
              "2   0.694971  0.727770   0.665000  0.350889  \n",
              "3   0.704101  0.763338   0.653396  0.350860  \n",
              "4   0.720102  0.774282   0.673008  0.390929  \n",
              "5   0.722753  0.775650   0.676611  0.397771  \n",
              "6   0.731334  0.783858   0.685407  0.417369  \n",
              "7   0.744572  0.797538   0.698204  0.446895  \n",
              "8   0.748387  0.793434   0.708181  0.459791  \n",
              "9   0.747736  0.790698   0.709202  0.459529  \n",
              "10  0.747736  0.790698   0.709202  0.459529  "
            ]
          },
          "execution_count": 46,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_name = [\"SVM\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  svclassifier = SVC()\n",
        "  svclassifier.fit(x_train, y_train)\n",
        "  y_predict = svclassifier.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = svclassifier.score(x_test, y_test)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_svm_default = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_svm_default.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_svm_default.csv\",  index = False)\n",
        "\n",
        "###result\n",
        "results_svm_default"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1M8OAir2SwU8"
      },
      "source": [
        "## SVM HP"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KCzoG4tZTtgV"
      },
      "outputs": [],
      "source": [
        "params = {\n",
        "'kernel':['linear', 'poly', 'rbf', 'sigmoid'],\n",
        "'degree':[1,2,3,4,5],\n",
        "'gamma':['scale', 'auto'],\n",
        "'coef0':[0.0,0.1,0.5,1],\n",
        "'max_iter':[-1, 1, 5, 10]\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 988
        },
        "id": "L9Sm8N1NqJBt",
        "outputId": "b0e2df6e-ea81-405d-891e-29481465885b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 4 folds for each of 640 candidates, totalling 2560 fits\n",
            "Iteration with: ['age']\n",
            "SVC(degree=1)\n",
            "Fitting 4 folds for each of 640 candidates, totalling 2560 fits\n",
            "Iteration with: ['age', 'education']\n",
            "SVC(degree=1)\n",
            "Fitting 4 folds for each of 640 candidates, totalling 2560 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay']\n",
            "SVC(coef0=0.1, kernel='poly')\n",
            "Fitting 4 folds for each of 640 candidates, totalling 2560 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol']\n",
            "SVC(coef0=0.1, degree=4, gamma='auto', kernel='poly')\n",
            "Fitting 4 folds for each of 640 candidates, totalling 2560 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP']\n",
            "SVC(coef0=0.5, degree=5, gamma='auto', kernel='poly')\n",
            "Fitting 4 folds for each of 640 candidates, totalling 2560 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI']\n",
            "SVC(coef0=0.5, degree=5, kernel='poly')\n",
            "Fitting 4 folds for each of 640 candidates, totalling 2560 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate']\n",
            "SVC(coef0=0.5, degree=5, kernel='poly')\n",
            "Fitting 4 folds for each of 640 candidates, totalling 2560 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose']\n",
            "SVC(coef0=0.5, degree=5, kernel='poly')\n",
            "Fitting 4 folds for each of 640 candidates, totalling 2560 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male']\n",
            "SVC(coef0=0.5, degree=5, kernel='poly')\n",
            "Fitting 4 folds for each of 640 candidates, totalling 2560 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male', 'BPMeds']\n",
            "SVC(coef0=1, degree=5, kernel='poly')\n",
            "Fitting 4 folds for each of 640 candidates, totalling 2560 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male', 'BPMeds', 'prevalentStroke']\n",
            "SVC(coef0=1, degree=5, kernel='poly')\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-caa81a19-4315-48e1-b5b3-2110af6febe0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.642559</td>\n",
              "      <td>0.684275</td>\n",
              "      <td>0.761970</td>\n",
              "      <td>0.620959</td>\n",
              "      <td>0.290055</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.668289</td>\n",
              "      <td>0.697143</td>\n",
              "      <td>0.751026</td>\n",
              "      <td>0.650474</td>\n",
              "      <td>0.338884</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.674548</td>\n",
              "      <td>0.708229</td>\n",
              "      <td>0.777018</td>\n",
              "      <td>0.650630</td>\n",
              "      <td>0.353780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.685675</td>\n",
              "      <td>0.725395</td>\n",
              "      <td>0.816689</td>\n",
              "      <td>0.652459</td>\n",
              "      <td>0.381291</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.690542</td>\n",
              "      <td>0.716380</td>\n",
              "      <td>0.768810</td>\n",
              "      <td>0.670644</td>\n",
              "      <td>0.383667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.709318</td>\n",
              "      <td>0.733418</td>\n",
              "      <td>0.786594</td>\n",
              "      <td>0.686977</td>\n",
              "      <td>0.421673</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.725313</td>\n",
              "      <td>0.749206</td>\n",
              "      <td>0.807114</td>\n",
              "      <td>0.699052</td>\n",
              "      <td>0.454711</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.761474</td>\n",
              "      <td>0.783323</td>\n",
              "      <td>0.848153</td>\n",
              "      <td>0.727700</td>\n",
              "      <td>0.529064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.771905</td>\n",
              "      <td>0.790281</td>\n",
              "      <td>0.845417</td>\n",
              "      <td>0.741897</td>\n",
              "      <td>0.548174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.767038</td>\n",
              "      <td>0.784566</td>\n",
              "      <td>0.834473</td>\n",
              "      <td>0.740291</td>\n",
              "      <td>0.537474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>SVM</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.762865</td>\n",
              "      <td>0.780989</td>\n",
              "      <td>0.831737</td>\n",
              "      <td>0.736077</td>\n",
              "      <td>0.529212</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-caa81a19-4315-48e1-b5b3-2110af6febe0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-caa81a19-4315-48e1-b5b3-2110af6febe0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-caa81a19-4315-48e1-b5b3-2110af6febe0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0         SVM                                              [age]  0.642559   \n",
              "1         SVM                                   [age, education]  0.668289   \n",
              "2         SVM                       [age, education, cigsPerDay]  0.674548   \n",
              "3         SVM              [age, education, cigsPerDay, totChol]  0.685675   \n",
              "4         SVM       [age, education, cigsPerDay, totChol, diaBP]  0.690542   \n",
              "5         SVM  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.709318   \n",
              "6         SVM  [age, education, cigsPerDay, totChol, diaBP, B...  0.725313   \n",
              "7         SVM  [age, education, cigsPerDay, totChol, diaBP, B...  0.761474   \n",
              "8         SVM  [age, education, cigsPerDay, totChol, diaBP, B...  0.771905   \n",
              "9         SVM  [age, education, cigsPerDay, totChol, diaBP, B...  0.767038   \n",
              "10        SVM  [age, education, cigsPerDay, totChol, diaBP, B...  0.762865   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.684275  0.761970   0.620959  0.290055  \n",
              "1   0.697143  0.751026   0.650474  0.338884  \n",
              "2   0.708229  0.777018   0.650630  0.353780  \n",
              "3   0.725395  0.816689   0.652459  0.381291  \n",
              "4   0.716380  0.768810   0.670644  0.383667  \n",
              "5   0.733418  0.786594   0.686977  0.421673  \n",
              "6   0.749206  0.807114   0.699052  0.454711  \n",
              "7   0.783323  0.848153   0.727700  0.529064  \n",
              "8   0.790281  0.845417   0.741897  0.548174  \n",
              "9   0.784566  0.834473   0.740291  0.537474  \n",
              "10  0.780989  0.831737   0.736077  0.529212  "
            ]
          },
          "execution_count": 50,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_name = [\"SVM\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  svclassifier = SVC()\n",
        "  model_hp = GridSearchCV(svclassifier,params,verbose=1,cv=4,n_jobs = -1,scoring='accuracy')\n",
        "  model_hp.fit(x_train,y_train)\n",
        "  print(\"Iteration with:\", features_list[:i])\n",
        "  print(model_hp.best_estimator_)\n",
        "  y_predict = model_hp.best_estimator_.predict(x_test)\n",
        "\n",
        "  ### Test Scores\n",
        "  score = accuracy_score(y_test, y_predict)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_svm_hp = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_svm_hp.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_svm_hp.csv\",  index = False)\n",
        "\n",
        "###result\n",
        "results_svm_hp"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NwYYuoKm68o6"
      },
      "source": [
        "# Decision Tree"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hQDS0qK_7GbK"
      },
      "source": [
        "## Decision Tree Default"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "W5brGWokqJEY",
        "outputId": "df630d8b-69f4-4c9e-ba31-47dd88547a79"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-40bbacee-dafa-4b37-b61a-06940a688d5e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.649513</td>\n",
              "      <td>0.679797</td>\n",
              "      <td>0.731874</td>\n",
              "      <td>0.634638</td>\n",
              "      <td>0.300695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.664812</td>\n",
              "      <td>0.679095</td>\n",
              "      <td>0.697674</td>\n",
              "      <td>0.661479</td>\n",
              "      <td>0.329326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.696801</td>\n",
              "      <td>0.688571</td>\n",
              "      <td>0.659371</td>\n",
              "      <td>0.720478</td>\n",
              "      <td>0.395776</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.700278</td>\n",
              "      <td>0.706603</td>\n",
              "      <td>0.709986</td>\n",
              "      <td>0.703252</td>\n",
              "      <td>0.400311</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.744784</td>\n",
              "      <td>0.750849</td>\n",
              "      <td>0.756498</td>\n",
              "      <td>0.745283</td>\n",
              "      <td>0.489354</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.742003</td>\n",
              "      <td>0.750839</td>\n",
              "      <td>0.764706</td>\n",
              "      <td>0.737467</td>\n",
              "      <td>0.483880</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.751739</td>\n",
              "      <td>0.760563</td>\n",
              "      <td>0.775650</td>\n",
              "      <td>0.746053</td>\n",
              "      <td>0.503414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.773296</td>\n",
              "      <td>0.785526</td>\n",
              "      <td>0.816689</td>\n",
              "      <td>0.756654</td>\n",
              "      <td>0.547645</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.760779</td>\n",
              "      <td>0.772487</td>\n",
              "      <td>0.798906</td>\n",
              "      <td>0.747759</td>\n",
              "      <td>0.522136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.751043</td>\n",
              "      <td>0.761015</td>\n",
              "      <td>0.779754</td>\n",
              "      <td>0.743155</td>\n",
              "      <td>0.502162</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.751043</td>\n",
              "      <td>0.762599</td>\n",
              "      <td>0.786594</td>\n",
              "      <td>0.740026</td>\n",
              "      <td>0.502447</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40bbacee-dafa-4b37-b61a-06940a688d5e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-40bbacee-dafa-4b37-b61a-06940a688d5e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-40bbacee-dafa-4b37-b61a-06940a688d5e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0          DT                                              [age]  0.649513   \n",
              "1          DT                                   [age, education]  0.664812   \n",
              "2          DT                       [age, education, cigsPerDay]  0.696801   \n",
              "3          DT              [age, education, cigsPerDay, totChol]  0.700278   \n",
              "4          DT       [age, education, cigsPerDay, totChol, diaBP]  0.744784   \n",
              "5          DT  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.742003   \n",
              "6          DT  [age, education, cigsPerDay, totChol, diaBP, B...  0.751739   \n",
              "7          DT  [age, education, cigsPerDay, totChol, diaBP, B...  0.773296   \n",
              "8          DT  [age, education, cigsPerDay, totChol, diaBP, B...  0.760779   \n",
              "9          DT  [age, education, cigsPerDay, totChol, diaBP, B...  0.751043   \n",
              "10         DT  [age, education, cigsPerDay, totChol, diaBP, B...  0.751043   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.679797  0.731874   0.634638  0.300695  \n",
              "1   0.679095  0.697674   0.661479  0.329326  \n",
              "2   0.688571  0.659371   0.720478  0.395776  \n",
              "3   0.706603  0.709986   0.703252  0.400311  \n",
              "4   0.750849  0.756498   0.745283  0.489354  \n",
              "5   0.750839  0.764706   0.737467  0.483880  \n",
              "6   0.760563  0.775650   0.746053  0.503414  \n",
              "7   0.785526  0.816689   0.756654  0.547645  \n",
              "8   0.772487  0.798906   0.747759  0.522136  \n",
              "9   0.761015  0.779754   0.743155  0.502162  \n",
              "10  0.762599  0.786594   0.740026  0.502447  "
            ]
          },
          "execution_count": 53,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_name = [\"DT\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  model = DecisionTreeClassifier()\n",
        "  model = model.fit(x_train, y_train)\n",
        "  y_predict = model.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = model.score(x_test,y_test)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_DT_default = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_DT_default.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_DT_default.csv\",  index = False)\n",
        "\n",
        "###result\n",
        "results_DT_default"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NCUVdeC6CnZZ"
      },
      "source": [
        "## Decision Tree HP"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "R5Pjd-X5iMtf"
      },
      "outputs": [],
      "source": [
        "params = {\n",
        "'criterion':[\"gini\", \"entropy\", \"log_loss\"],\n",
        "'splitter':[\"best\", \"random\"],\n",
        "'max_depth':[1,5,10,20,30],\n",
        "'min_samples_split':[0.5,1.0,2,5],\n",
        "'min_samples_leaf':[0.5,1,2,5],\n",
        "'min_weight_fraction_leaf':[0.0,0.1,0.5,1.0],\n",
        "'max_features':[\"auto\", \"sqrt\", \"log2\"],\n",
        "'max_leaf_nodes':[0,1,2,5]\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "irPI49LPqJHN",
        "outputId": "4e9ece2b-680d-4664-a944-8d0dbe94c05f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 4 folds for each of 23040 candidates, totalling 92160 fits\n",
            "Iteration with: ['age']\n",
            "DecisionTreeClassifier(max_depth=5, max_features='log2', max_leaf_nodes=5,\n",
            "                       min_samples_leaf=2, splitter='random')\n",
            "Fitting 4 folds for each of 23040 candidates, totalling 92160 fits\n",
            "Iteration with: ['age', 'education']\n",
            "DecisionTreeClassifier(max_depth=5, max_features='log2', max_leaf_nodes=5,\n",
            "                       min_samples_leaf=5, min_samples_split=5)\n",
            "Fitting 4 folds for each of 23040 candidates, totalling 92160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay']\n",
            "DecisionTreeClassifier(criterion='entropy', max_depth=30, max_features='log2',\n",
            "                       max_leaf_nodes=5, min_samples_leaf=2)\n",
            "Fitting 4 folds for each of 23040 candidates, totalling 92160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol']\n",
            "DecisionTreeClassifier(criterion='entropy', max_depth=30, max_features='sqrt',\n",
            "                       max_leaf_nodes=5, min_samples_split=5,\n",
            "                       min_weight_fraction_leaf=0.1)\n",
            "Fitting 4 folds for each of 23040 candidates, totalling 92160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP']\n",
            "DecisionTreeClassifier(max_depth=30, max_features='auto', max_leaf_nodes=5,\n",
            "                       min_samples_split=5)\n",
            "Fitting 4 folds for each of 23040 candidates, totalling 92160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI']\n",
            "DecisionTreeClassifier(criterion='entropy', max_depth=10, max_features='auto',\n",
            "                       max_leaf_nodes=5, min_samples_leaf=2,\n",
            "                       min_samples_split=5)\n",
            "Fitting 4 folds for each of 23040 candidates, totalling 92160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate']\n",
            "DecisionTreeClassifier(max_depth=5, max_features='log2', max_leaf_nodes=5)\n",
            "Fitting 4 folds for each of 23040 candidates, totalling 92160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose']\n",
            "DecisionTreeClassifier(criterion='entropy', max_depth=10, max_features='log2',\n",
            "                       max_leaf_nodes=5, min_samples_leaf=2,\n",
            "                       min_samples_split=5)\n",
            "Fitting 4 folds for each of 23040 candidates, totalling 92160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male']\n",
            "DecisionTreeClassifier(max_depth=20, max_features='auto', max_leaf_nodes=5,\n",
            "                       min_samples_leaf=5, min_samples_split=5)\n",
            "Fitting 4 folds for each of 23040 candidates, totalling 92160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male', 'BPMeds']\n",
            "DecisionTreeClassifier(criterion='entropy', max_depth=5, max_features='sqrt',\n",
            "                       max_leaf_nodes=5, min_samples_leaf=5,\n",
            "                       min_weight_fraction_leaf=0.1)\n",
            "Fitting 4 folds for each of 23040 candidates, totalling 92160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male', 'BPMeds', 'prevalentStroke']\n",
            "DecisionTreeClassifier(max_depth=20, max_features='auto', max_leaf_nodes=5,\n",
            "                       min_samples_leaf=2, min_samples_split=5)\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-323a0814-9fe8-4ab4-b7a1-293a04559a28\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.621001</td>\n",
              "      <td>0.711793</td>\n",
              "      <td>0.920657</td>\n",
              "      <td>0.580172</td>\n",
              "      <td>0.293486</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.672462</td>\n",
              "      <td>0.713678</td>\n",
              "      <td>0.803010</td>\n",
              "      <td>0.642232</td>\n",
              "      <td>0.353701</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.649513</td>\n",
              "      <td>0.701775</td>\n",
              "      <td>0.811218</td>\n",
              "      <td>0.618352</td>\n",
              "      <td>0.311354</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.652295</td>\n",
              "      <td>0.674479</td>\n",
              "      <td>0.708618</td>\n",
              "      <td>0.643478</td>\n",
              "      <td>0.304824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.650904</td>\n",
              "      <td>0.704358</td>\n",
              "      <td>0.818057</td>\n",
              "      <td>0.618407</td>\n",
              "      <td>0.315452</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.633519</td>\n",
              "      <td>0.700738</td>\n",
              "      <td>0.844049</td>\n",
              "      <td>0.599029</td>\n",
              "      <td>0.288211</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.659249</td>\n",
              "      <td>0.676354</td>\n",
              "      <td>0.700410</td>\n",
              "      <td>0.653895</td>\n",
              "      <td>0.318320</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.643255</td>\n",
              "      <td>0.699473</td>\n",
              "      <td>0.816689</td>\n",
              "      <td>0.611680</td>\n",
              "      <td>0.300430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.601530</td>\n",
              "      <td>0.595053</td>\n",
              "      <td>0.575923</td>\n",
              "      <td>0.615497</td>\n",
              "      <td>0.204143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.656467</td>\n",
              "      <td>0.654545</td>\n",
              "      <td>0.640219</td>\n",
              "      <td>0.669528</td>\n",
              "      <td>0.313564</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>DT</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.650904</td>\n",
              "      <td>0.704358</td>\n",
              "      <td>0.818057</td>\n",
              "      <td>0.618407</td>\n",
              "      <td>0.315452</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-323a0814-9fe8-4ab4-b7a1-293a04559a28')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-323a0814-9fe8-4ab4-b7a1-293a04559a28 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-323a0814-9fe8-4ab4-b7a1-293a04559a28');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0          DT                                              [age]  0.621001   \n",
              "1          DT                                   [age, education]  0.672462   \n",
              "2          DT                       [age, education, cigsPerDay]  0.649513   \n",
              "3          DT              [age, education, cigsPerDay, totChol]  0.652295   \n",
              "4          DT       [age, education, cigsPerDay, totChol, diaBP]  0.650904   \n",
              "5          DT  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.633519   \n",
              "6          DT  [age, education, cigsPerDay, totChol, diaBP, B...  0.659249   \n",
              "7          DT  [age, education, cigsPerDay, totChol, diaBP, B...  0.643255   \n",
              "8          DT  [age, education, cigsPerDay, totChol, diaBP, B...  0.601530   \n",
              "9          DT  [age, education, cigsPerDay, totChol, diaBP, B...  0.656467   \n",
              "10         DT  [age, education, cigsPerDay, totChol, diaBP, B...  0.650904   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.711793  0.920657   0.580172  0.293486  \n",
              "1   0.713678  0.803010   0.642232  0.353701  \n",
              "2   0.701775  0.811218   0.618352  0.311354  \n",
              "3   0.674479  0.708618   0.643478  0.304824  \n",
              "4   0.704358  0.818057   0.618407  0.315452  \n",
              "5   0.700738  0.844049   0.599029  0.288211  \n",
              "6   0.676354  0.700410   0.653895  0.318320  \n",
              "7   0.699473  0.816689   0.611680  0.300430  \n",
              "8   0.595053  0.575923   0.615497  0.204143  \n",
              "9   0.654545  0.640219   0.669528  0.313564  \n",
              "10  0.704358  0.818057   0.618407  0.315452  "
            ]
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_name = [\"DT\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  model = DecisionTreeClassifier()\n",
        "  model_hp = GridSearchCV(model,params,verbose=1,cv=4,n_jobs = -1,scoring='accuracy')\n",
        "  model_hp.fit(x_train,y_train)\n",
        "  print(\"Iteration with:\", features_list[:i])\n",
        "  print(model_hp.best_estimator_)\n",
        "  y_predict = model_hp.best_estimator_.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = accuracy_score(y_test, y_predict)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_DT_hp = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_DT_hp.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_DT_hp.csv\",  index = False)\n",
        "\n",
        "### RESULT\n",
        "results_DT_hp"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PSa7Jci6Cut7"
      },
      "source": [
        "# Random Forest"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SdIm657iCzo9"
      },
      "source": [
        "## Random Forest Default"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "l2CfGTOSqJKC",
        "outputId": "5de9a923-008d-47c4-834b-258f591a145d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-ea352fed-54a4-4895-aa10-8682371d1064\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.650904</td>\n",
              "      <td>0.682278</td>\n",
              "      <td>0.737346</td>\n",
              "      <td>0.634865</td>\n",
              "      <td>0.303840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.664117</td>\n",
              "      <td>0.682446</td>\n",
              "      <td>0.709986</td>\n",
              "      <td>0.656962</td>\n",
              "      <td>0.328235</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.694715</td>\n",
              "      <td>0.695350</td>\n",
              "      <td>0.685363</td>\n",
              "      <td>0.705634</td>\n",
              "      <td>0.389723</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.733658</td>\n",
              "      <td>0.742434</td>\n",
              "      <td>0.755130</td>\n",
              "      <td>0.730159</td>\n",
              "      <td>0.467141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.796940</td>\n",
              "      <td>0.802969</td>\n",
              "      <td>0.813953</td>\n",
              "      <td>0.792277</td>\n",
              "      <td>0.593809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.808067</td>\n",
              "      <td>0.814516</td>\n",
              "      <td>0.829001</td>\n",
              "      <td>0.800528</td>\n",
              "      <td>0.616198</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.835188</td>\n",
              "      <td>0.838446</td>\n",
              "      <td>0.841313</td>\n",
              "      <td>0.835598</td>\n",
              "      <td>0.670262</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.846314</td>\n",
              "      <td>0.850777</td>\n",
              "      <td>0.861833</td>\n",
              "      <td>0.840000</td>\n",
              "      <td>0.692650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.842142</td>\n",
              "      <td>0.847344</td>\n",
              "      <td>0.861833</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>0.684427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.852573</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.870041</td>\n",
              "      <td>0.844622</td>\n",
              "      <td>0.705244</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.846314</td>\n",
              "      <td>0.850777</td>\n",
              "      <td>0.861833</td>\n",
              "      <td>0.840000</td>\n",
              "      <td>0.692650</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea352fed-54a4-4895-aa10-8682371d1064')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ea352fed-54a4-4895-aa10-8682371d1064 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ea352fed-54a4-4895-aa10-8682371d1064');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0          RF                                              [age]  0.650904   \n",
              "1          RF                                   [age, education]  0.664117   \n",
              "2          RF                       [age, education, cigsPerDay]  0.694715   \n",
              "3          RF              [age, education, cigsPerDay, totChol]  0.733658   \n",
              "4          RF       [age, education, cigsPerDay, totChol, diaBP]  0.796940   \n",
              "5          RF  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.808067   \n",
              "6          RF  [age, education, cigsPerDay, totChol, diaBP, B...  0.835188   \n",
              "7          RF  [age, education, cigsPerDay, totChol, diaBP, B...  0.846314   \n",
              "8          RF  [age, education, cigsPerDay, totChol, diaBP, B...  0.842142   \n",
              "9          RF  [age, education, cigsPerDay, totChol, diaBP, B...  0.852573   \n",
              "10         RF  [age, education, cigsPerDay, totChol, diaBP, B...  0.846314   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.682278  0.737346   0.634865  0.303840  \n",
              "1   0.682446  0.709986   0.656962  0.328235  \n",
              "2   0.695350  0.685363   0.705634  0.389723  \n",
              "3   0.742434  0.755130   0.730159  0.467141  \n",
              "4   0.802969  0.813953   0.792277  0.593809  \n",
              "5   0.814516  0.829001   0.800528  0.616198  \n",
              "6   0.838446  0.841313   0.835598  0.670262  \n",
              "7   0.850777  0.861833   0.840000  0.692650  \n",
              "8   0.847344  0.861833   0.833333  0.684427  \n",
              "9   0.857143  0.870041   0.844622  0.705244  \n",
              "10  0.850777  0.861833   0.840000  0.692650  "
            ]
          },
          "execution_count": 55,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_name = [\"RF\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  clf = RandomForestClassifier()\n",
        "  clf.fit(x_train, y_train)\n",
        "  y_predict = clf.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = clf.score(x_test,y_test)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_RF_default = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_RF_default.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_RF_default.csv\",  index = False)\n",
        "\n",
        "###result\n",
        "results_RF_default"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sNtQ-f2SEIx6"
      },
      "source": [
        "## Random Forest HP"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ikiMwFB5qDWM"
      },
      "outputs": [],
      "source": [
        "params = {\n",
        "'n_estimators':[100,200],\n",
        "'criterion':[\"gini\", \"entropy\"],\n",
        "'max_depth':[10,15,20],\n",
        "'min_samples_split':[0.5,1.0,2.0],\n",
        "'min_samples_leaf':[0.5,1],\n",
        "'min_weight_fraction_leaf':[0.0,0.1,1.0],\n",
        "'max_leaf_nodes':[5,10,20],\n",
        "'max_features':[\"sqrt\", \"log2\"]\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "emP1AVJ4qJM9",
        "outputId": "a442eed8-20bd-4984-8ad7-7bc8278861c5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 4 folds for each of 1296 candidates, totalling 5184 fits\n",
            "Iteration with: ['age']\n",
            "RandomForestClassifier(max_depth=10, max_features='sqrt', max_leaf_nodes=5,\n",
            "                       min_samples_split=0.5, n_estimators=200, random_state=1)\n",
            "Fitting 4 folds for each of 1296 candidates, totalling 5184 fits\n",
            "Iteration with: ['age', 'education']\n",
            "RandomForestClassifier(max_depth=10, max_features='sqrt', max_leaf_nodes=5,\n",
            "                       min_samples_split=0.5, n_estimators=200, random_state=1)\n",
            "Fitting 4 folds for each of 1296 candidates, totalling 5184 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay']\n",
            "RandomForestClassifier(criterion='entropy', max_depth=10, max_features='sqrt',\n",
            "                       max_leaf_nodes=5, min_samples_split=0.5,\n",
            "                       n_estimators=200, random_state=1)\n",
            "Fitting 4 folds for each of 1296 candidates, totalling 5184 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol']\n",
            "RandomForestClassifier(criterion='entropy', max_depth=10, max_features='sqrt',\n",
            "                       max_leaf_nodes=5, min_samples_split=0.5,\n",
            "                       n_estimators=200, random_state=1)\n",
            "Fitting 4 folds for each of 1296 candidates, totalling 5184 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP']\n",
            "RandomForestClassifier(criterion='entropy', max_depth=10, max_features='sqrt',\n",
            "                       max_leaf_nodes=5, min_samples_split=0.5,\n",
            "                       min_weight_fraction_leaf=0.1, n_estimators=200,\n",
            "                       random_state=1)\n",
            "Fitting 4 folds for each of 1296 candidates, totalling 5184 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI']\n",
            "RandomForestClassifier(criterion='entropy', max_depth=10, max_features='sqrt',\n",
            "                       max_leaf_nodes=5, min_samples_split=0.5,\n",
            "                       n_estimators=200, random_state=1)\n",
            "Fitting 4 folds for each of 1296 candidates, totalling 5184 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate']\n",
            "RandomForestClassifier(max_depth=10, max_features='sqrt', max_leaf_nodes=5,\n",
            "                       min_samples_split=0.5, random_state=1)\n",
            "Fitting 4 folds for each of 1296 candidates, totalling 5184 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose']\n",
            "RandomForestClassifier(max_depth=10, max_features='sqrt', max_leaf_nodes=5,\n",
            "                       min_samples_split=0.5, random_state=1)\n",
            "Fitting 4 folds for each of 1296 candidates, totalling 5184 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male']\n",
            "RandomForestClassifier(max_depth=10, max_features='sqrt', max_leaf_nodes=5,\n",
            "                       min_samples_split=0.5, n_estimators=200, random_state=1)\n",
            "Fitting 4 folds for each of 1296 candidates, totalling 5184 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male', 'BPMeds']\n",
            "RandomForestClassifier(criterion='entropy', max_depth=10, max_features='sqrt',\n",
            "                       max_leaf_nodes=5, min_samples_split=0.5, random_state=1)\n",
            "Fitting 4 folds for each of 1296 candidates, totalling 5184 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male', 'BPMeds', 'prevalentStroke']\n",
            "RandomForestClassifier(max_depth=10, max_features='sqrt', max_leaf_nodes=5,\n",
            "                       min_samples_split=0.5, n_estimators=200, random_state=1)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0          RF                                              [age]  0.649513   \n",
              "1          RF                                   [age, education]  0.658554   \n",
              "2          RF                       [age, education, cigsPerDay]  0.670376   \n",
              "3          RF              [age, education, cigsPerDay, totChol]  0.660640   \n",
              "4          RF       [age, education, cigsPerDay, totChol, diaBP]  0.666898   \n",
              "5          RF  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.666203   \n",
              "6          RF  [age, education, cigsPerDay, totChol, diaBP, B...  0.660640   \n",
              "7          RF  [age, education, cigsPerDay, totChol, diaBP, B...  0.671071   \n",
              "8          RF  [age, education, cigsPerDay, totChol, diaBP, B...  0.680807   \n",
              "9          RF  [age, education, cigsPerDay, totChol, diaBP, B...  0.676634   \n",
              "10         RF  [age, education, cigsPerDay, totChol, diaBP, B...  0.675939   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.702830  0.815321   0.617617  0.312199  \n",
              "1   0.698958  0.779754   0.633333  0.323363  \n",
              "2   0.703008  0.767442   0.648555  0.344588  \n",
              "3   0.699877  0.778386   0.635754  0.327192  \n",
              "4   0.673483  0.675787   0.671196  0.333542  \n",
              "5   0.675237  0.682627   0.668005  0.332054  \n",
              "6   0.670270  0.678523   0.662216  0.320907  \n",
              "7   0.678887  0.683995   0.673854  0.341831  \n",
              "8   0.701366  0.737346   0.668734  0.362306  \n",
              "9   0.687290  0.699042   0.675926  0.352926  \n",
              "10  0.684282  0.690834   0.677852  0.351553  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5b308a80-6468-4f32-9732-067e9c3357da\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.649513</td>\n",
              "      <td>0.702830</td>\n",
              "      <td>0.815321</td>\n",
              "      <td>0.617617</td>\n",
              "      <td>0.312199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.658554</td>\n",
              "      <td>0.698958</td>\n",
              "      <td>0.779754</td>\n",
              "      <td>0.633333</td>\n",
              "      <td>0.323363</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.670376</td>\n",
              "      <td>0.703008</td>\n",
              "      <td>0.767442</td>\n",
              "      <td>0.648555</td>\n",
              "      <td>0.344588</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.660640</td>\n",
              "      <td>0.699877</td>\n",
              "      <td>0.778386</td>\n",
              "      <td>0.635754</td>\n",
              "      <td>0.327192</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.666898</td>\n",
              "      <td>0.673483</td>\n",
              "      <td>0.675787</td>\n",
              "      <td>0.671196</td>\n",
              "      <td>0.333542</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.666203</td>\n",
              "      <td>0.675237</td>\n",
              "      <td>0.682627</td>\n",
              "      <td>0.668005</td>\n",
              "      <td>0.332054</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.660640</td>\n",
              "      <td>0.670270</td>\n",
              "      <td>0.678523</td>\n",
              "      <td>0.662216</td>\n",
              "      <td>0.320907</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.671071</td>\n",
              "      <td>0.678887</td>\n",
              "      <td>0.683995</td>\n",
              "      <td>0.673854</td>\n",
              "      <td>0.341831</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.680807</td>\n",
              "      <td>0.701366</td>\n",
              "      <td>0.737346</td>\n",
              "      <td>0.668734</td>\n",
              "      <td>0.362306</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.676634</td>\n",
              "      <td>0.687290</td>\n",
              "      <td>0.699042</td>\n",
              "      <td>0.675926</td>\n",
              "      <td>0.352926</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>RF</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.675939</td>\n",
              "      <td>0.684282</td>\n",
              "      <td>0.690834</td>\n",
              "      <td>0.677852</td>\n",
              "      <td>0.351553</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b308a80-6468-4f32-9732-067e9c3357da')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5b308a80-6468-4f32-9732-067e9c3357da button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5b308a80-6468-4f32-9732-067e9c3357da');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ],
      "source": [
        "model_name = [\"RF\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  clf = RandomForestClassifier(random_state=1)\n",
        "  model_hp = GridSearchCV(clf,params,verbose=1,cv=4,n_jobs = -1,scoring='accuracy')\n",
        "  model_hp.fit(x_train,y_train)\n",
        "  print(\"Iteration with:\", features_list[:i])\n",
        "  print(model_hp.best_estimator_)\n",
        "  y_predict = model_hp.best_estimator_.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = accuracy_score(y_test, y_predict)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_RF_hp3 = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_RF_hp3.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_RF_hp3.csv\",  index = False)\n",
        "\n",
        "### RESULT\n",
        "results_RF_hp3"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IyMzQJp9EQZj"
      },
      "source": [
        "# Extra Tree"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aKUvi32kEX-n"
      },
      "source": [
        "## Extra Tree Default"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "uTLnJhS0qJP4",
        "outputId": "ee5d833e-4d16-49fc-cd98-4b7bb7776a66"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-af7bfe58-f834-490d-b990-c6d4e8c19848\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ET</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.649513</td>\n",
              "      <td>0.679797</td>\n",
              "      <td>0.731874</td>\n",
              "      <td>0.634638</td>\n",
              "      <td>0.300695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ET</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.664812</td>\n",
              "      <td>0.679095</td>\n",
              "      <td>0.697674</td>\n",
              "      <td>0.661479</td>\n",
              "      <td>0.329326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ET</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.693324</td>\n",
              "      <td>0.685674</td>\n",
              "      <td>0.658003</td>\n",
              "      <td>0.715774</td>\n",
              "      <td>0.388624</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ET</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.717663</td>\n",
              "      <td>0.724932</td>\n",
              "      <td>0.731874</td>\n",
              "      <td>0.718121</td>\n",
              "      <td>0.435068</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ET</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.798331</td>\n",
              "      <td>0.804582</td>\n",
              "      <td>0.816689</td>\n",
              "      <td>0.792829</td>\n",
              "      <td>0.596623</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>ET</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.812239</td>\n",
              "      <td>0.816825</td>\n",
              "      <td>0.823529</td>\n",
              "      <td>0.810229</td>\n",
              "      <td>0.624356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>ET</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.837274</td>\n",
              "      <td>0.840599</td>\n",
              "      <td>0.844049</td>\n",
              "      <td>0.837178</td>\n",
              "      <td>0.674435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>ET</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.856745</td>\n",
              "      <td>0.860622</td>\n",
              "      <td>0.870041</td>\n",
              "      <td>0.851406</td>\n",
              "      <td>0.713482</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>ET</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.845619</td>\n",
              "      <td>0.849797</td>\n",
              "      <td>0.859097</td>\n",
              "      <td>0.840696</td>\n",
              "      <td>0.691208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>ET</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.847705</td>\n",
              "      <td>0.851927</td>\n",
              "      <td>0.861833</td>\n",
              "      <td>0.842246</td>\n",
              "      <td>0.695400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>ET</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.844228</td>\n",
              "      <td>0.847203</td>\n",
              "      <td>0.849521</td>\n",
              "      <td>0.844898</td>\n",
              "      <td>0.688351</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af7bfe58-f834-490d-b990-c6d4e8c19848')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-af7bfe58-f834-490d-b990-c6d4e8c19848 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-af7bfe58-f834-490d-b990-c6d4e8c19848');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0          ET                                              [age]  0.649513   \n",
              "1          ET                                   [age, education]  0.664812   \n",
              "2          ET                       [age, education, cigsPerDay]  0.693324   \n",
              "3          ET              [age, education, cigsPerDay, totChol]  0.717663   \n",
              "4          ET       [age, education, cigsPerDay, totChol, diaBP]  0.798331   \n",
              "5          ET  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.812239   \n",
              "6          ET  [age, education, cigsPerDay, totChol, diaBP, B...  0.837274   \n",
              "7          ET  [age, education, cigsPerDay, totChol, diaBP, B...  0.856745   \n",
              "8          ET  [age, education, cigsPerDay, totChol, diaBP, B...  0.845619   \n",
              "9          ET  [age, education, cigsPerDay, totChol, diaBP, B...  0.847705   \n",
              "10         ET  [age, education, cigsPerDay, totChol, diaBP, B...  0.844228   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.679797  0.731874   0.634638  0.300695  \n",
              "1   0.679095  0.697674   0.661479  0.329326  \n",
              "2   0.685674  0.658003   0.715774  0.388624  \n",
              "3   0.724932  0.731874   0.718121  0.435068  \n",
              "4   0.804582  0.816689   0.792829  0.596623  \n",
              "5   0.816825  0.823529   0.810229  0.624356  \n",
              "6   0.840599  0.844049   0.837178  0.674435  \n",
              "7   0.860622  0.870041   0.851406  0.713482  \n",
              "8   0.849797  0.859097   0.840696  0.691208  \n",
              "9   0.851927  0.861833   0.842246  0.695400  \n",
              "10  0.847203  0.849521   0.844898  0.688351  "
            ]
          },
          "execution_count": 57,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_name = [\"ET\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  clf = ExtraTreesClassifier()\n",
        "  clf.fit(x_train, y_train)\n",
        "  y_predict = clf.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = clf.score(x_test,y_test)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_ET_default = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_ET_default.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_ET_default.csv\",  index = False)\n",
        "\n",
        "###result\n",
        "results_ET_default"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ocHOEGWYF1T6"
      },
      "source": [
        "## Extra Tree HP"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Fof8GTJSqJTO"
      },
      "outputs": [],
      "source": [
        "params = {\n",
        "'n_estimators':[50,100,150,200],\n",
        "'criterion':[\"gini\", \"entropy\",\"log_loss\"],\n",
        "'max_depth':[1,5,10,20,30],\n",
        "'min_samples_split':[0.5,1.0,2,5],\n",
        "'min_samples_leaf':[0.5,1,2,5],\n",
        "'min_weight_fraction_leaf':[0.0,0.1,0.5,1.0],\n",
        "'max_leaf_nodes':[1,2,5,10],\n",
        "'max_features':[\"sqrt\", \"log2\"]\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "E9IaPTbttAVl",
        "outputId": "d552949f-43e1-45d9-d928-60c9edaf7179"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 4 folds for each of 30720 candidates, totalling 122880 fits\n"
          ]
        },
        {
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-39-bc83ab037968>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     23\u001b[0m   \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mExtraTreesClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m   \u001b[0mmodel_hp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn_jobs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'accuracy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m   \u001b[0mmodel_hp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Iteration with:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_hp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_estimator_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    889\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 891\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    892\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1390\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1392\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1393\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    836\u001b[0m                     )\n\u001b[1;32m    837\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 838\u001b[0;31m                 out = parallel(\n\u001b[0m\u001b[1;32m    839\u001b[0m                     delayed(_fit_and_score)(\n\u001b[1;32m    840\u001b[0m                         \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_estimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1096\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1097\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1098\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1099\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1100\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    973\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    974\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 975\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    976\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    977\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    565\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    566\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 567\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    568\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mCfTimeoutError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    569\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.8/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    437\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    438\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 439\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_condition\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    440\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    441\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mCANCELLED\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCANCELLED_AND_NOTIFIED\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.8/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    300\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    301\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 302\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    303\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    304\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "model_name = [\"ET\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  clf = ExtraTreesClassifier()\n",
        "  model_hp = GridSearchCV(clf,params,verbose=1,cv=4,n_jobs = -1,scoring='accuracy')\n",
        "  model_hp.fit(x_train,y_train)\n",
        "  print(\"Iteration with:\", features_list[:i])\n",
        "  print(model_hp.best_estimator_)\n",
        "  y_predict = model_hp.best_estimator_.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = accuracy_score(y_test, y_predict)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_ET_hp = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_ET_hp.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_ET_hp.csv\",  index = False)\n",
        "\n",
        "### RESULT\n",
        "results_ET_hp"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-lvoo9z5GC0l"
      },
      "source": [
        "# AdaBoost"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5I7AIPrcGC74"
      },
      "source": [
        "## AdaBooost Default"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "gAaxttA8tAjn",
        "outputId": "152f4970-492b-4cec-b2b7-e71a407c386b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-8af564f2-1377-4ef0-9b43-2a260326c4e7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.650904</td>\n",
              "      <td>0.682278</td>\n",
              "      <td>0.737346</td>\n",
              "      <td>0.634865</td>\n",
              "      <td>0.303840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.662726</td>\n",
              "      <td>0.697442</td>\n",
              "      <td>0.764706</td>\n",
              "      <td>0.641055</td>\n",
              "      <td>0.329492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.689152</td>\n",
              "      <td>0.715105</td>\n",
              "      <td>0.767442</td>\n",
              "      <td>0.669451</td>\n",
              "      <td>0.380846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.675939</td>\n",
              "      <td>0.689747</td>\n",
              "      <td>0.708618</td>\n",
              "      <td>0.671855</td>\n",
              "      <td>0.351640</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.685675</td>\n",
              "      <td>0.700265</td>\n",
              "      <td>0.722298</td>\n",
              "      <td>0.679537</td>\n",
              "      <td>0.371264</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.680807</td>\n",
              "      <td>0.690909</td>\n",
              "      <td>0.701778</td>\n",
              "      <td>0.680371</td>\n",
              "      <td>0.361279</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.691238</td>\n",
              "      <td>0.695890</td>\n",
              "      <td>0.694938</td>\n",
              "      <td>0.696845</td>\n",
              "      <td>0.382334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.682893</td>\n",
              "      <td>0.684211</td>\n",
              "      <td>0.675787</td>\n",
              "      <td>0.692847</td>\n",
              "      <td>0.365989</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.691238</td>\n",
              "      <td>0.694215</td>\n",
              "      <td>0.689466</td>\n",
              "      <td>0.699029</td>\n",
              "      <td>0.382484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.696106</td>\n",
              "      <td>0.697159</td>\n",
              "      <td>0.688098</td>\n",
              "      <td>0.706461</td>\n",
              "      <td>0.392447</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.696106</td>\n",
              "      <td>0.697159</td>\n",
              "      <td>0.688098</td>\n",
              "      <td>0.706461</td>\n",
              "      <td>0.392447</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8af564f2-1377-4ef0-9b43-2a260326c4e7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8af564f2-1377-4ef0-9b43-2a260326c4e7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8af564f2-1377-4ef0-9b43-2a260326c4e7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0    AdaBoost                                              [age]  0.650904   \n",
              "1    AdaBoost                                   [age, education]  0.662726   \n",
              "2    AdaBoost                       [age, education, cigsPerDay]  0.689152   \n",
              "3    AdaBoost              [age, education, cigsPerDay, totChol]  0.675939   \n",
              "4    AdaBoost       [age, education, cigsPerDay, totChol, diaBP]  0.685675   \n",
              "5    AdaBoost  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.680807   \n",
              "6    AdaBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.691238   \n",
              "7    AdaBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.682893   \n",
              "8    AdaBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.691238   \n",
              "9    AdaBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.696106   \n",
              "10   AdaBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.696106   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.682278  0.737346   0.634865  0.303840  \n",
              "1   0.697442  0.764706   0.641055  0.329492  \n",
              "2   0.715105  0.767442   0.669451  0.380846  \n",
              "3   0.689747  0.708618   0.671855  0.351640  \n",
              "4   0.700265  0.722298   0.679537  0.371264  \n",
              "5   0.690909  0.701778   0.680371  0.361279  \n",
              "6   0.695890  0.694938   0.696845  0.382334  \n",
              "7   0.684211  0.675787   0.692847  0.365989  \n",
              "8   0.694215  0.689466   0.699029  0.382484  \n",
              "9   0.697159  0.688098   0.706461  0.392447  \n",
              "10  0.697159  0.688098   0.706461  0.392447  "
            ]
          },
          "execution_count": 59,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_name = [\"AdaBoost\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  clf = AdaBoostClassifier()\n",
        "  clf.fit(x_train, y_train)\n",
        "  y_predict = clf.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = clf.score(x_test,y_test)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_AdB_default = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_AdB_default.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_AdB_default.csv\",  index = False)\n",
        "\n",
        "###result\n",
        "results_AdB_default"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W6ak7_cmHtdQ"
      },
      "source": [
        "## AdaBoost HP"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mH2Nh4-MHyy5"
      },
      "outputs": [],
      "source": [
        "params = {\n",
        "'n_estimators':[40,50,70,100,150],\n",
        "'learning_rate':[0.01,0.05,0.1,1],\n",
        "'algorithm':['SAMME','SAMME.R']\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 988
        },
        "id": "NBmbKasMHy30",
        "outputId": "c273b2f8-1e8f-4ed0-caf4-1a9baddf6832"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 4 folds for each of 40 candidates, totalling 160 fits\n",
            "Iteration with: ['age']\n",
            "AdaBoostClassifier(learning_rate=0.05, n_estimators=150)\n",
            "Fitting 4 folds for each of 40 candidates, totalling 160 fits\n",
            "Iteration with: ['age', 'education']\n",
            "AdaBoostClassifier(learning_rate=0.1, n_estimators=70)\n",
            "Fitting 4 folds for each of 40 candidates, totalling 160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay']\n",
            "AdaBoostClassifier(learning_rate=1, n_estimators=150)\n",
            "Fitting 4 folds for each of 40 candidates, totalling 160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol']\n",
            "AdaBoostClassifier(learning_rate=1, n_estimators=150)\n",
            "Fitting 4 folds for each of 40 candidates, totalling 160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP']\n",
            "AdaBoostClassifier(learning_rate=1, n_estimators=150)\n",
            "Fitting 4 folds for each of 40 candidates, totalling 160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI']\n",
            "AdaBoostClassifier(learning_rate=1, n_estimators=150)\n",
            "Fitting 4 folds for each of 40 candidates, totalling 160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate']\n",
            "AdaBoostClassifier(learning_rate=1, n_estimators=150)\n",
            "Fitting 4 folds for each of 40 candidates, totalling 160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose']\n",
            "AdaBoostClassifier(learning_rate=1, n_estimators=150)\n",
            "Fitting 4 folds for each of 40 candidates, totalling 160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male']\n",
            "AdaBoostClassifier(learning_rate=1, n_estimators=150)\n",
            "Fitting 4 folds for each of 40 candidates, totalling 160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male', 'BPMeds']\n",
            "AdaBoostClassifier(learning_rate=1, n_estimators=150)\n",
            "Fitting 4 folds for each of 40 candidates, totalling 160 fits\n",
            "Iteration with: ['age', 'education', 'cigsPerDay', 'totChol', 'diaBP', 'BMI', 'heartRate', 'glucose', 'male', 'BPMeds', 'prevalentStroke']\n",
            "AdaBoostClassifier(learning_rate=1, n_estimators=150)\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-e09cb6ef-1766-4c77-a5ce-7309d636b5eb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.650904</td>\n",
              "      <td>0.682278</td>\n",
              "      <td>0.737346</td>\n",
              "      <td>0.634865</td>\n",
              "      <td>0.303840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.669680</td>\n",
              "      <td>0.698795</td>\n",
              "      <td>0.753762</td>\n",
              "      <td>0.651300</td>\n",
              "      <td>0.341834</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.702364</td>\n",
              "      <td>0.721717</td>\n",
              "      <td>0.759234</td>\n",
              "      <td>0.687732</td>\n",
              "      <td>0.405793</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.707232</td>\n",
              "      <td>0.721745</td>\n",
              "      <td>0.746922</td>\n",
              "      <td>0.698210</td>\n",
              "      <td>0.414655</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.707232</td>\n",
              "      <td>0.716880</td>\n",
              "      <td>0.729138</td>\n",
              "      <td>0.705026</td>\n",
              "      <td>0.414212</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.711405</td>\n",
              "      <td>0.718262</td>\n",
              "      <td>0.723666</td>\n",
              "      <td>0.712938</td>\n",
              "      <td>0.422551</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.728790</td>\n",
              "      <td>0.732877</td>\n",
              "      <td>0.731874</td>\n",
              "      <td>0.733882</td>\n",
              "      <td>0.457456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.718359</td>\n",
              "      <td>0.723549</td>\n",
              "      <td>0.725034</td>\n",
              "      <td>0.722071</td>\n",
              "      <td>0.436525</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.727399</td>\n",
              "      <td>0.732606</td>\n",
              "      <td>0.734610</td>\n",
              "      <td>0.730612</td>\n",
              "      <td>0.454603</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.728790</td>\n",
              "      <td>0.730290</td>\n",
              "      <td>0.722298</td>\n",
              "      <td>0.738462</td>\n",
              "      <td>0.457744</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>AdaBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.728790</td>\n",
              "      <td>0.730290</td>\n",
              "      <td>0.722298</td>\n",
              "      <td>0.738462</td>\n",
              "      <td>0.457744</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e09cb6ef-1766-4c77-a5ce-7309d636b5eb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e09cb6ef-1766-4c77-a5ce-7309d636b5eb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e09cb6ef-1766-4c77-a5ce-7309d636b5eb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0    AdaBoost                                              [age]  0.650904   \n",
              "1    AdaBoost                                   [age, education]  0.669680   \n",
              "2    AdaBoost                       [age, education, cigsPerDay]  0.702364   \n",
              "3    AdaBoost              [age, education, cigsPerDay, totChol]  0.707232   \n",
              "4    AdaBoost       [age, education, cigsPerDay, totChol, diaBP]  0.707232   \n",
              "5    AdaBoost  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.711405   \n",
              "6    AdaBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.728790   \n",
              "7    AdaBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.718359   \n",
              "8    AdaBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.727399   \n",
              "9    AdaBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.728790   \n",
              "10   AdaBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.728790   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.682278  0.737346   0.634865  0.303840  \n",
              "1   0.698795  0.753762   0.651300  0.341834  \n",
              "2   0.721717  0.759234   0.687732  0.405793  \n",
              "3   0.721745  0.746922   0.698210  0.414655  \n",
              "4   0.716880  0.729138   0.705026  0.414212  \n",
              "5   0.718262  0.723666   0.712938  0.422551  \n",
              "6   0.732877  0.731874   0.733882  0.457456  \n",
              "7   0.723549  0.725034   0.722071  0.436525  \n",
              "8   0.732606  0.734610   0.730612  0.454603  \n",
              "9   0.730290  0.722298   0.738462  0.457744  \n",
              "10  0.730290  0.722298   0.738462  0.457744  "
            ]
          },
          "execution_count": 68,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_name = [\"AdaBoost\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  clf = AdaBoostClassifier()\n",
        "  model_hp = GridSearchCV(clf,params,verbose=1,cv=4,n_jobs = -1,scoring='accuracy')\n",
        "  model_hp.fit(x_train,y_train)\n",
        "  print(\"Iteration with:\", features_list[:i])\n",
        "  print(model_hp.best_estimator_)\n",
        "  y_predict = model_hp.best_estimator_.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = accuracy_score(y_test, y_predict)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_Adb_hp = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_Adb_hp.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_Adb_hp.csv\",  index = False)\n",
        "\n",
        "### RESULT\n",
        "results_Adb_hp"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M_KcbQR3HxHh"
      },
      "source": [
        "# XGBoost"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rWRmTAeUHxLS"
      },
      "source": [
        "## XGBoost Default"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "V6yeCg5KtAmS",
        "outputId": "45e8ae92-fcfe-4b2a-a7c5-39b662e8d2a3"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-9c467af4-65df-4139-901f-ca9534bc29f1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>XGBoost</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.650904</td>\n",
              "      <td>0.682278</td>\n",
              "      <td>0.737346</td>\n",
              "      <td>0.634865</td>\n",
              "      <td>0.303840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>XGBoost</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.673157</td>\n",
              "      <td>0.702908</td>\n",
              "      <td>0.760602</td>\n",
              "      <td>0.653349</td>\n",
              "      <td>0.349234</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>XGBoost</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.708623</td>\n",
              "      <td>0.727036</td>\n",
              "      <td>0.763338</td>\n",
              "      <td>0.694030</td>\n",
              "      <td>0.418264</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>XGBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.703755</td>\n",
              "      <td>0.720105</td>\n",
              "      <td>0.749658</td>\n",
              "      <td>0.692794</td>\n",
              "      <td>0.407946</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>XGBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.727399</td>\n",
              "      <td>0.735849</td>\n",
              "      <td>0.746922</td>\n",
              "      <td>0.725100</td>\n",
              "      <td>0.454581</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>XGBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.728095</td>\n",
              "      <td>0.738462</td>\n",
              "      <td>0.755130</td>\n",
              "      <td>0.722513</td>\n",
              "      <td>0.456102</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>XGBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.743394</td>\n",
              "      <td>0.751849</td>\n",
              "      <td>0.764706</td>\n",
              "      <td>0.739418</td>\n",
              "      <td>0.486641</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>XGBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.742698</td>\n",
              "      <td>0.747268</td>\n",
              "      <td>0.748290</td>\n",
              "      <td>0.746248</td>\n",
              "      <td>0.485231</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>XGBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.737135</td>\n",
              "      <td>0.742857</td>\n",
              "      <td>0.746922</td>\n",
              "      <td>0.738836</td>\n",
              "      <td>0.474055</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>XGBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.738526</td>\n",
              "      <td>0.742466</td>\n",
              "      <td>0.741450</td>\n",
              "      <td>0.743484</td>\n",
              "      <td>0.476932</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>XGBoost</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.738526</td>\n",
              "      <td>0.742466</td>\n",
              "      <td>0.741450</td>\n",
              "      <td>0.743484</td>\n",
              "      <td>0.476932</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9c467af4-65df-4139-901f-ca9534bc29f1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9c467af4-65df-4139-901f-ca9534bc29f1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9c467af4-65df-4139-901f-ca9534bc29f1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0     XGBoost                                              [age]  0.650904   \n",
              "1     XGBoost                                   [age, education]  0.673157   \n",
              "2     XGBoost                       [age, education, cigsPerDay]  0.708623   \n",
              "3     XGBoost              [age, education, cigsPerDay, totChol]  0.703755   \n",
              "4     XGBoost       [age, education, cigsPerDay, totChol, diaBP]  0.727399   \n",
              "5     XGBoost  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.728095   \n",
              "6     XGBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.743394   \n",
              "7     XGBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.742698   \n",
              "8     XGBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.737135   \n",
              "9     XGBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.738526   \n",
              "10    XGBoost  [age, education, cigsPerDay, totChol, diaBP, B...  0.738526   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.682278  0.737346   0.634865  0.303840  \n",
              "1   0.702908  0.760602   0.653349  0.349234  \n",
              "2   0.727036  0.763338   0.694030  0.418264  \n",
              "3   0.720105  0.749658   0.692794  0.407946  \n",
              "4   0.735849  0.746922   0.725100  0.454581  \n",
              "5   0.738462  0.755130   0.722513  0.456102  \n",
              "6   0.751849  0.764706   0.739418  0.486641  \n",
              "7   0.747268  0.748290   0.746248  0.485231  \n",
              "8   0.742857  0.746922   0.738836  0.474055  \n",
              "9   0.742466  0.741450   0.743484  0.476932  \n",
              "10  0.742466  0.741450   0.743484  0.476932  "
            ]
          },
          "execution_count": 61,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_name = [\"XGBoost\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  clf = xgb.XGBClassifier()\n",
        "  clf.fit(x_train, y_train)\n",
        "  y_predict = clf.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = clf.score(x_test,y_test)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_XGB_default = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_XGB_default.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_XGB_default.csv\",  index = False)\n",
        "\n",
        "###result\n",
        "results_XGB_default"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q1Init2XJIYO"
      },
      "source": [
        "## XGBoost HP"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "j5obftB_tApi"
      },
      "outputs": [],
      "source": [
        "params = {\n",
        "'eta':[0.1, 0.2, 0.3, 0.4],\n",
        "'max_depth':[2,4,6,8,10],\n",
        "'gamma':[0.5,0,1],\n",
        "'subsample':[0.5,1,1.5],\n",
        "'colsample_bytree':[0.5,0.8,1],\n",
        "'learning_rate':[0.05,0.01,0.1],\n",
        "'n_estimators':[5,10,15]\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 242
        },
        "id": "6N-jgRjWtAsc",
        "outputId": "a761c07f-25b1-4520-8aa2-415c464a1f29"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-7c3e62bbed2f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0;31m### creating dependent and independent data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m   \u001b[0mclass1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprojectdata_trans\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeatures_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m   \u001b[0mclass2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprojectdata_trans\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"TenYearCHD\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'projectdata_trans' is not defined"
          ]
        }
      ],
      "source": [
        "model_name = [\"XGBoost\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  clf = xgb.XGBClassifier()\n",
        "  model_hp = GridSearchCV(clf,params,verbose=1,cv=4,n_jobs = -1,scoring='accuracy')\n",
        "  model_hp.fit(x_train,y_train)\n",
        "  print(\"Iteration with:\", features_list[:i])\n",
        "  print(model_hp.best_estimator_)\n",
        "  y_predict = model_hp.best_estimator_.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = accuracy_score(y_test, y_predict)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_XGB_hp1 = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_XGB_hp1.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_XGB_hp1.csv\",  index = False)\n",
        "\n",
        "### RESULT\n",
        "results_XGB_hp1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HfJGT3CPfZWa"
      },
      "source": [
        "# Ensembled Voting Method"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "B0uo03XttAyE",
        "outputId": "a6321f55-adc0-4912-8071-0a9cdeff1da2"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-eb98dd55-dc97-4329-83f1-6588a80434d4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Voting-1</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.655076</td>\n",
              "      <td>0.687264</td>\n",
              "      <td>0.745554</td>\n",
              "      <td>0.637427</td>\n",
              "      <td>0.312683</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Voting-1</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.673157</td>\n",
              "      <td>0.688329</td>\n",
              "      <td>0.709986</td>\n",
              "      <td>0.667954</td>\n",
              "      <td>0.346144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Voting-1</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.690542</td>\n",
              "      <td>0.685067</td>\n",
              "      <td>0.662107</td>\n",
              "      <td>0.709677</td>\n",
              "      <td>0.382504</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Voting-1</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.739221</td>\n",
              "      <td>0.748828</td>\n",
              "      <td>0.764706</td>\n",
              "      <td>0.733596</td>\n",
              "      <td>0.478367</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Voting-1</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.819193</td>\n",
              "      <td>0.827586</td>\n",
              "      <td>0.853625</td>\n",
              "      <td>0.803089</td>\n",
              "      <td>0.639212</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Voting-1</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.842837</td>\n",
              "      <td>0.850923</td>\n",
              "      <td>0.882353</td>\n",
              "      <td>0.821656</td>\n",
              "      <td>0.687139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Voting-1</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.856050</td>\n",
              "      <td>0.863005</td>\n",
              "      <td>0.891929</td>\n",
              "      <td>0.835897</td>\n",
              "      <td>0.713355</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Voting-1</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.863004</td>\n",
              "      <td>0.870989</td>\n",
              "      <td>0.909713</td>\n",
              "      <td>0.835427</td>\n",
              "      <td>0.728512</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Voting-1</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.863004</td>\n",
              "      <td>0.869967</td>\n",
              "      <td>0.901505</td>\n",
              "      <td>0.840561</td>\n",
              "      <td>0.727580</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Voting-1</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.865786</td>\n",
              "      <td>0.871931</td>\n",
              "      <td>0.898769</td>\n",
              "      <td>0.846649</td>\n",
              "      <td>0.732656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Voting-1</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.867177</td>\n",
              "      <td>0.873761</td>\n",
              "      <td>0.904241</td>\n",
              "      <td>0.845269</td>\n",
              "      <td>0.735823</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb98dd55-dc97-4329-83f1-6588a80434d4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-eb98dd55-dc97-4329-83f1-6588a80434d4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-eb98dd55-dc97-4329-83f1-6588a80434d4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0    Voting-1                                              [age]  0.655076   \n",
              "1    Voting-1                                   [age, education]  0.673157   \n",
              "2    Voting-1                       [age, education, cigsPerDay]  0.690542   \n",
              "3    Voting-1              [age, education, cigsPerDay, totChol]  0.739221   \n",
              "4    Voting-1       [age, education, cigsPerDay, totChol, diaBP]  0.819193   \n",
              "5    Voting-1  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.842837   \n",
              "6    Voting-1  [age, education, cigsPerDay, totChol, diaBP, B...  0.856050   \n",
              "7    Voting-1  [age, education, cigsPerDay, totChol, diaBP, B...  0.863004   \n",
              "8    Voting-1  [age, education, cigsPerDay, totChol, diaBP, B...  0.863004   \n",
              "9    Voting-1  [age, education, cigsPerDay, totChol, diaBP, B...  0.865786   \n",
              "10   Voting-1  [age, education, cigsPerDay, totChol, diaBP, B...  0.867177   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.687264  0.745554   0.637427  0.312683  \n",
              "1   0.688329  0.709986   0.667954  0.346144  \n",
              "2   0.685067  0.662107   0.709677  0.382504  \n",
              "3   0.748828  0.764706   0.733596  0.478367  \n",
              "4   0.827586  0.853625   0.803089  0.639212  \n",
              "5   0.850923  0.882353   0.821656  0.687139  \n",
              "6   0.863005  0.891929   0.835897  0.713355  \n",
              "7   0.870989  0.909713   0.835427  0.728512  \n",
              "8   0.869967  0.901505   0.840561  0.727580  \n",
              "9   0.871931  0.898769   0.846649  0.732656  \n",
              "10  0.873761  0.904241   0.845269  0.735823  "
            ]
          },
          "execution_count": 49,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_name = [\"Voting-1\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  ExtraTree_clf=ExtraTreesClassifier()\n",
        "  RandomForest_clf=RandomForestClassifier()\n",
        "  KNN_clf=KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
        "  XGB_clf=xgb.XGBClassifier(colsample_bytree=0.5, eta=0.1, gamma=0.5, max_depth=10,n_estimators=15)\n",
        "  DT_clf=DecisionTreeClassifier()\n",
        "  eclf1 = VotingClassifier(estimators=[('ET', ExtraTree_clf), ('RF', RandomForest_clf), ('KNN', KNN_clf), ('XGB', XGB_clf), ('DT', DT_clf)], voting='hard')\n",
        "  eclf1 = eclf1.fit(x_train, y_train)\n",
        "  y_predict = eclf1.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = eclf1.score(x_test,y_test)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_voting_hard = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_voting_hard.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_voting_hard.csv\",  index = False)\n",
        "\n",
        "###result\n",
        "results_voting_hard"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "kjj5biiptA06",
        "outputId": "f787cc8c-d1f8-4010-f47f-5fabc5cfb0f3"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-be7e0857-779c-4481-b060-69a2c4778cc7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Features</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Recall</th>\n",
              "      <th>Precision</th>\n",
              "      <th>MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Voting-2</td>\n",
              "      <td>[age]</td>\n",
              "      <td>0.632128</td>\n",
              "      <td>0.640381</td>\n",
              "      <td>0.644323</td>\n",
              "      <td>0.636486</td>\n",
              "      <td>0.263918</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Voting-2</td>\n",
              "      <td>[age, education]</td>\n",
              "      <td>0.661335</td>\n",
              "      <td>0.694671</td>\n",
              "      <td>0.757866</td>\n",
              "      <td>0.641204</td>\n",
              "      <td>0.326048</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Voting-2</td>\n",
              "      <td>[age, education, cigsPerDay]</td>\n",
              "      <td>0.682893</td>\n",
              "      <td>0.674286</td>\n",
              "      <td>0.645691</td>\n",
              "      <td>0.705531</td>\n",
              "      <td>0.367888</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Voting-2</td>\n",
              "      <td>[age, education, cigsPerDay, totChol]</td>\n",
              "      <td>0.724618</td>\n",
              "      <td>0.740498</td>\n",
              "      <td>0.772914</td>\n",
              "      <td>0.710692</td>\n",
              "      <td>0.450055</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Voting-2</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP]</td>\n",
              "      <td>0.794854</td>\n",
              "      <td>0.807315</td>\n",
              "      <td>0.845417</td>\n",
              "      <td>0.772500</td>\n",
              "      <td>0.591676</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Voting-2</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, BMI]</td>\n",
              "      <td>0.827538</td>\n",
              "      <td>0.836842</td>\n",
              "      <td>0.870041</td>\n",
              "      <td>0.806084</td>\n",
              "      <td>0.656662</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Voting-2</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.829624</td>\n",
              "      <td>0.839133</td>\n",
              "      <td>0.874145</td>\n",
              "      <td>0.806818</td>\n",
              "      <td>0.661062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Voting-2</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.848401</td>\n",
              "      <td>0.858625</td>\n",
              "      <td>0.905609</td>\n",
              "      <td>0.816276</td>\n",
              "      <td>0.700521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Voting-2</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.853964</td>\n",
              "      <td>0.863281</td>\n",
              "      <td>0.906977</td>\n",
              "      <td>0.823602</td>\n",
              "      <td>0.711135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Voting-2</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.851878</td>\n",
              "      <td>0.861598</td>\n",
              "      <td>0.906977</td>\n",
              "      <td>0.820545</td>\n",
              "      <td>0.707226</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Voting-2</td>\n",
              "      <td>[age, education, cigsPerDay, totChol, diaBP, B...</td>\n",
              "      <td>0.849791</td>\n",
              "      <td>0.860285</td>\n",
              "      <td>0.909713</td>\n",
              "      <td>0.815951</td>\n",
              "      <td>0.703753</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-be7e0857-779c-4481-b060-69a2c4778cc7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-be7e0857-779c-4481-b060-69a2c4778cc7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-be7e0857-779c-4481-b060-69a2c4778cc7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Model Name                                           Features  Accuracy  \\\n",
              "0    Voting-2                                              [age]  0.632128   \n",
              "1    Voting-2                                   [age, education]  0.661335   \n",
              "2    Voting-2                       [age, education, cigsPerDay]  0.682893   \n",
              "3    Voting-2              [age, education, cigsPerDay, totChol]  0.724618   \n",
              "4    Voting-2       [age, education, cigsPerDay, totChol, diaBP]  0.794854   \n",
              "5    Voting-2  [age, education, cigsPerDay, totChol, diaBP, BMI]  0.827538   \n",
              "6    Voting-2  [age, education, cigsPerDay, totChol, diaBP, B...  0.829624   \n",
              "7    Voting-2  [age, education, cigsPerDay, totChol, diaBP, B...  0.848401   \n",
              "8    Voting-2  [age, education, cigsPerDay, totChol, diaBP, B...  0.853964   \n",
              "9    Voting-2  [age, education, cigsPerDay, totChol, diaBP, B...  0.851878   \n",
              "10   Voting-2  [age, education, cigsPerDay, totChol, diaBP, B...  0.849791   \n",
              "\n",
              "    F1 Score    Recall  Precision       MCC  \n",
              "0   0.640381  0.644323   0.636486  0.263918  \n",
              "1   0.694671  0.757866   0.641204  0.326048  \n",
              "2   0.674286  0.645691   0.705531  0.367888  \n",
              "3   0.740498  0.772914   0.710692  0.450055  \n",
              "4   0.807315  0.845417   0.772500  0.591676  \n",
              "5   0.836842  0.870041   0.806084  0.656662  \n",
              "6   0.839133  0.874145   0.806818  0.661062  \n",
              "7   0.858625  0.905609   0.816276  0.700521  \n",
              "8   0.863281  0.906977   0.823602  0.711135  \n",
              "9   0.861598  0.906977   0.820545  0.707226  \n",
              "10  0.860285  0.909713   0.815951  0.703753  "
            ]
          },
          "execution_count": 50,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_name = [\"Voting-2\"]\n",
        "\n",
        "features = []\n",
        "accuracy_list = []\n",
        "f1_list = []\n",
        "recall_list = []\n",
        "precision_list = []\n",
        "mcc_list = []\n",
        "model_name_list = []\n",
        "\n",
        "\n",
        "\n",
        "for i in range(1, 12):\n",
        "\n",
        "  ### creating dependent and independent data\n",
        "  class1 = projectdata_trans[features_list[:i]]\n",
        "  class2 = projectdata_trans[\"TenYearCHD\"]\n",
        "\n",
        "  ### splitting into train & test\n",
        "  x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "  ### Model\n",
        "  ExtraTree_clf=ExtraTreesClassifier()\n",
        "  RandomForest_clf=RandomForestClassifier()\n",
        "  KNN_clf=KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
        "  XGB_clf=xgb.XGBClassifier(colsample_bytree=0.5, eta=0.1, gamma=0.5, max_depth=10,n_estimators=15)\n",
        "  DT_clf=DecisionTreeClassifier()\n",
        "  eclf1 = VotingClassifier(estimators=[('ET', ExtraTree_clf), ('RF', RandomForest_clf), ('KNN', KNN_clf), ('XGB', XGB_clf), ('DT', DT_clf)], voting='soft')\n",
        "  eclf1 = eclf1.fit(x_train, y_train)\n",
        "  y_predict = eclf1.predict(x_test)\n",
        "\n",
        "\n",
        "  ### Test Scores\n",
        "  score = eclf1.score(x_test,y_test)\n",
        "  f1 = f1_score(y_test, y_predict)\n",
        "  recall = recall_score(y_test, y_predict)\n",
        "  precision = precision_score(y_test, y_predict)\n",
        "  mcc = matthews_corrcoef(y_test, y_predict)\n",
        "\n",
        "\n",
        "  ### Appending to lists\n",
        "  features.append(features_list[:i])\n",
        "  accuracy_list.append(score)\n",
        "  f1_list.append(f1)\n",
        "  recall_list.append(recall)\n",
        "  precision_list.append(precision)\n",
        "  mcc_list.append(mcc)\n",
        "  model_name_list = model_name * len(features_list)\n",
        "\n",
        "\n",
        "### Summarizing in a table\n",
        "df_dict = {\n",
        "    \"Model Name\" : model_name_list,\n",
        "    \"Features\" : features,\n",
        "    \"Accuracy\" : accuracy_list,\n",
        "    \"F1 Score\" : f1_list,\n",
        "    \"Recall\" : recall_list,\n",
        "    \"Precision\" : precision_list,\n",
        "    \"MCC\" : mcc_list\n",
        "}\n",
        "\n",
        "\n",
        "### change df name each time\n",
        "results_voting_soft = pd.DataFrame(df_dict)\n",
        "\n",
        "### Save the dataframe\n",
        "results_voting_soft.to_csv(\"/content/drive/MyDrive/ML Project 1st sem_phd/Output/results_voting_soft.csv\",  index = False)\n",
        "\n",
        "###result\n",
        "results_voting_soft"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rqVTg2FJorW8"
      },
      "source": [
        "# ROC-AUC curve"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hdHtdnpzsCme"
      },
      "outputs": [],
      "source": [
        "indp=projectdata_trans[features_list[:8]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "A77RsYxOr4fl",
        "outputId": "035b993e-027e-415d-e65e-5b76aecdc4ba"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "ExtraTree_clf=ExtraTreesClassifier()\n",
        "RandomForest_clf=RandomForestClassifier()\n",
        "KNN_clf=KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
        "XGB_clf=xgb.XGBClassifier(colsample_bytree=0.5, eta=0.1, gamma=0.5, max_depth=10,n_estimators=15)\n",
        "DT_clf=DecisionTreeClassifier()\n",
        "eclf1 = VotingClassifier(estimators=[('ET', ExtraTree_clf), ('RF', RandomForest_clf), ('KNN', KNN_clf), ('XGB', XGB_clf), ('DT', DT_clf)], voting='soft')\n",
        "eclf1 = eclf1.fit(x_train, y_train)\n",
        "y_predict = eclf1.predict(x_test)\n",
        "plot_roc_curve(eclf1,x_test,y_test)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "IC9jBSmPzzjD",
        "outputId": "2b72e32d-e658-4200-e530-b28f4ebcdb16"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 0 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.savefig('/content/drive/MyDrive/ML Project 1st sem_phd/Output/Voting.jpg')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n44q0d8gqVB7"
      },
      "source": [
        "## KNN"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "xd2cWm9bXybf",
        "outputId": "1747446b-f0b6-4483-d1d3-95080ec95843"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:9]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "neigh = KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
        "neigh.fit(x_train, y_train)\n",
        "y_predict = neigh.predict(x_test)\n",
        "plot_roc_curve(neigh,x_test,y_test)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "96tH-KDMqT-D"
      },
      "source": [
        "## SVM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "3VifLPejXyhn",
        "outputId": "e6518f75-20c8-441f-fc0b-28cb57c4cf7b"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:9]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "svclassifier = SVC(coef0=0.5, degree=5, kernel='poly')\n",
        "svclassifier.fit(x_train, y_train)\n",
        "y_predict = svclassifier.predict(x_test)\n",
        "plot_roc_curve(svclassifier,x_test,y_test)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NIC9OLMvuZ3Z"
      },
      "source": [
        "## Decision Tree"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "LqGJ1XZjr4pU",
        "outputId": "1aad5f6b-150f-4e94-9c54-83463878b2cd"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:8]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "model = DecisionTreeClassifier()\n",
        "model = model.fit(x_train, y_train)\n",
        "y_predict = model.predict(x_test)\n",
        "plot_roc_curve(model,x_test,y_test)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gIMMyj4lugWp"
      },
      "source": [
        "# Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "Jna2jAxkr4xM",
        "outputId": "50295d73-a137-45bf-ceec-6dc77b53c91e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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zJnMnDmTF154we/5AZ7fi/z8/OoqvJo/vn8TVfbt20efPn0A6N27d61VTaNHj+btt9+msLCQAwcO8MEHH7Bz587q5VdddRW9e/fmyy+/5Kabbqqen5KSwieffOLp/OpjJQITNA355t6cioqKSE5OZteuXQwdOpQzzzwTgLy8PK688ko2b96MiFBWVla9zemnn07nzp0BGDZsGDt27ODAgQNMnjyZHj16ADBjxgy+/vprAFauXMk//uE8aH/FFVfwy1/+snpf06ZNQ0QYOXIkvXr1YuRIZ5yn4cOHs337dpKTkwGnaqh79+7V29W3z4svvpiIiAgKCgpYsWIFF198cfWykpISACZNmsSsWbO45JJLuOCCC5r0HmZmZnL33Xdz6NAhCgoKOPvss+s8xoQJE/jd735HVlYWF1xwAUlJSZ6OUd+5+J5zTXv27Kn+TMC58G7evJlTTjkFESEqKorMzExGjBhR6x01Db3LJj4+/qgE3hAiUuvxzjrrLFavXs3EiRPp0aMHEyZMOOpcFy1aREVFBTfddBPLli3jqquuAqBnz558+eWXjYrFV0BLBCJyjoh8JSJbROSOWpZ3EJFl7vLPRCQxkPGY8FT17XPHjh2oanUbwf/93/8xZcoUMjMzee211456+rmqygec6pKG1sX7qtpXu3btjtpvu3btGr3fuLg4ACorK+nSpUt120J6ejqbNm0CnG/mv/3tb9m5cydjx44lJyfnmP0MHz6cNWvW+D3erFmzeOyxx1i/fj333HNP9XtV2zEuu+yy6m/9U6dO5T//+Y+nc6rvXHzPuaaYmJijPrsXX3yR3NxcBgwYQGJiItu3b68uFXTr1u2oxtqDBw9WJ1+v70VDSwS9evViz549gJO0evbsWet+77rrLtLT03n33XdRVQYPHnzU8oiICC699FJeeeW/IwBUVWs2VcASgdt99ePAD4BhwEwRGVZjtWuAXFUdBDwCPIgxARIbG8ujjz7Kww8/THl5OXl5efTt2xeg3rr6KuPHj+ejjz4iJyeHsrIyXnrppeplEydOZOnSpQAsWbKEU089tcnxetlnp06dGDBgQHUsqsq6desA2Lp1K+PHj2fu3Ln06NGDnTt3Eh8fT35+fvX2t99+O/fff391yaayspInnnjimOPk5+fTp08fysrKWLJkSfX82o6xbds2Bg4cyM0338x5551X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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:10]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "clf = RandomForestClassifier()\n",
        "clf.fit(x_train, y_train)\n",
        "y_predict = clf.predict(x_test)\n",
        "plot_roc_curve(clf,x_test,y_test)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IPsQPazpul-j"
      },
      "source": [
        "## Extra Tree"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "YPvanYnKr4z1",
        "outputId": "9d244f90-d78f-4b87-ede4-124758f191ab"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:8]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "clf = ExtraTreesClassifier()\n",
        "clf.fit(x_train, y_train)\n",
        "y_predict = clf.predict(x_test)\n",
        "plot_roc_curve(clf,x_test,y_test)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pHmUrhXVurVC"
      },
      "source": [
        "# AdaBoost"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "4Hx5gDJkr425",
        "outputId": "d846731d-3024-406e-fa6a-9acf4b10629e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:7]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "clf = AdaBoostClassifier(learning_rate=1, n_estimators=150)\n",
        "clf.fit(x_train, y_train)\n",
        "y_predict = clf.predict(x_test)\n",
        "plot_roc_curve(clf,x_test,y_test)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nzs-0GF7uv1L"
      },
      "source": [
        "#XGBoost"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "T_qGHVdgr45w",
        "outputId": "c0466bb5-9a27-4fbb-b3c7-2858cce552f7"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:8]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "clf = xgb.XGBClassifier(olsample_bytree=0.5, eta=0.1, gamma=0.5, max_depth=10, n_estimators=15)\n",
        "clf.fit(x_train, y_train)\n",
        "y_predict = clf.predict(x_test)\n",
        "plot_roc_curve(clf,x_test,y_test)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7S7WwVhiejIg"
      },
      "source": [
        "# Over-fitting and Under-Fitting"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ujrK0hbU6eKt"
      },
      "source": [
        "## Voting Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q3YiAKCWXys-",
        "outputId": "bb4b3479-266e-40bf-800c-8b1629a7ae54"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Traing Data Accuracy= 1.0\n",
            "Test Data Accuracy= 0.8518776077885952\n"
          ]
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:8]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "ExtraTree_clf=ExtraTreesClassifier()\n",
        "RandomForest_clf=RandomForestClassifier()\n",
        "KNN_clf=KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
        "XGB_clf=xgb.XGBClassifier(colsample_bytree=0.5, eta=0.1, gamma=0.5, max_depth=10,n_estimators=15)\n",
        "DT_clf=DecisionTreeClassifier()\n",
        "eclf1 = VotingClassifier(estimators=[('ET', ExtraTree_clf), ('RF', RandomForest_clf), ('KNN', KNN_clf), ('XGB', XGB_clf), ('DT', DT_clf)], voting='soft')\n",
        "eclf1 = eclf1.fit(x_train, y_train)\n",
        "y_predict = eclf1.predict(x_test)\n",
        "\n",
        "## traing and test set accuracy\n",
        "print(\"Traing Data Accuracy=\", accuracy_score(y_train,eclf1.predict(x_train)))\n",
        "print(\"Test Data Accuracy=\", accuracy_score(y_test,y_predict))\n",
        "\n",
        "##interpretation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vJghAj6R6nAs"
      },
      "source": [
        "## KNN"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NMp66NHkXywC",
        "outputId": "c0357a2a-7e98-414e-8c52-f95696d62f1d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Traing Data Accuracy= 1.0\n",
            "Test Data Accuracy= 0.8435326842837274\n"
          ]
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:9]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "neigh = KNeighborsClassifier(leaf_size=5, n_neighbors=2, weights='distance')\n",
        "neigh.fit(x_train, y_train)\n",
        "y_predict = neigh.predict(x_test)\n",
        "\n",
        "## traing and test set accuracy\n",
        "print(\"Traing Data Accuracy=\", accuracy_score(y_train,neigh.predict(x_train)))\n",
        "print(\"Test Data Accuracy=\", accuracy_score(y_test,y_predict))\n",
        "\n",
        "##interpretation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JRozXn0Z6qP0"
      },
      "source": [
        "## SVM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-6-IkOj16qmn",
        "outputId": "8fafa656-0845-4e1d-dec5-ca87f10ab873"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Traing Data Accuracy= 0.843304347826087\n",
            "Test Data Accuracy= 0.7726008344923505\n"
          ]
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:9]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "svclassifier = SVC(coef0=0.5, degree=5, kernel='poly')\n",
        "svclassifier.fit(x_train, y_train)\n",
        "y_predict = svclassifier.predict(x_test)\n",
        "\n",
        "## traing and test set accuracy\n",
        "print(\"Traing Data Accuracy=\", accuracy_score(y_train,svclassifier.predict(x_train)))\n",
        "print(\"Test Data Accuracy=\", accuracy_score(y_test,y_predict))\n",
        "\n",
        "##interpretation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vmynB_-H6q5e"
      },
      "source": [
        "## Decision Tree"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kTQ6XJpF6rGh",
        "outputId": "02c8b636-9d4c-486b-bb89-7cf78b5c5903"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Traing Data Accuracy= 1.0\n",
            "Test Data Accuracy= 0.7677329624478443\n"
          ]
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:8]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "model = DecisionTreeClassifier()\n",
        "model = model.fit(x_train, y_train)\n",
        "y_predict = model.predict(x_test)\n",
        "\n",
        "## traing and test set accuracy\n",
        "print(\"Traing Data Accuracy=\", accuracy_score(y_train,model.predict(x_train)))\n",
        "print(\"Test Data Accuracy=\", accuracy_score(y_test,y_predict))\n",
        "\n",
        "##interpretation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LlC-U8X36rZw"
      },
      "source": [
        "## Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eqJpv5zy6rmd",
        "outputId": "a2a56e11-a626-4bd2-d54f-ceb98a944e61"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Traing Data Accuracy= 1.0\n",
            "Test Data Accuracy= 0.8428372739916551\n"
          ]
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:10]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "clf = RandomForestClassifier()\n",
        "clf.fit(x_train, y_train)\n",
        "y_predict = clf.predict(x_test)\n",
        "\n",
        "## traing and test set accuracy\n",
        "print(\"Traing Data Accuracy=\", accuracy_score(y_train,model.predict(x_train)))\n",
        "print(\"Test Data Accuracy=\", accuracy_score(y_test,y_predict))\n",
        "\n",
        "##interpretation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P2R3FElH6r5j"
      },
      "source": [
        "## Extra Tree"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LIdZEvDs6sFx",
        "outputId": "b94e488b-8e90-4c40-8819-cd6713d8b668"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Traing Data Accuracy= 1.0\n",
            "Test Data Accuracy= 0.8581363004172462\n"
          ]
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:8]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "clf = ExtraTreesClassifier()\n",
        "clf.fit(x_train, y_train)\n",
        "y_predict = clf.predict(x_test)\n",
        "\n",
        "## traing and test set accuracy\n",
        "print(\"Traing Data Accuracy=\", accuracy_score(y_train,clf.predict(x_train)))\n",
        "print(\"Test Data Accuracy=\", accuracy_score(y_test,y_predict))\n",
        "\n",
        "##interpretation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-_1383s869DS"
      },
      "source": [
        "## AdaBoost"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tv3vk7zo69Nv",
        "outputId": "7a0b4f91-4534-42c0-8c03-0a6616ab7afd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Traing Data Accuracy= 0.7513043478260869\n",
            "Test Data Accuracy= 0.7301808066759388\n"
          ]
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:7]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "\n",
        "clf = AdaBoostClassifier(learning_rate=1, n_estimators=150)\n",
        "clf.fit(x_train, y_train)\n",
        "y_predict = clf.predict(x_test)\n",
        "\n",
        "## traing and test set accuracy\n",
        "print(\"Traing Data Accuracy=\", accuracy_score(y_train,clf.predict(x_train)))\n",
        "print(\"Test Data Accuracy=\", accuracy_score(y_test,y_predict))\n",
        "\n",
        "##interpretation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YP5LwV2u69ZV"
      },
      "source": [
        "## XGBoost"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CbgmpVrW69hw",
        "outputId": "a7158fc0-9935-4906-b5fa-8baf596155b9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Traing Data Accuracy= 0.9113043478260869\n",
            "Test Data Accuracy= 0.7899860917941586\n"
          ]
        }
      ],
      "source": [
        "indp=projectdata_trans[features_list[:8]]\n",
        "dep=projectdata_trans['TenYearCHD']\n",
        "\n",
        "### splitting into train & test\n",
        "x_train, x_test, y_train, y_test = train_test_split(class1, class2,test_size=0.2,random_state=0)\n",
        "clf = xgb.XGBClassifier(olsample_bytree=0.5, eta=0.1, gamma=0.5, max_depth=10, n_estimators=15)\n",
        "clf.fit(x_train, y_train)\n",
        "y_predict = clf.predict(x_test)\n",
        "\n",
        "## traing and test set accuracy\n",
        "print(\"Traing Data Accuracy=\", accuracy_score(y_train,clf.predict(x_train)))\n",
        "print(\"Test Data Accuracy=\", accuracy_score(y_test,y_predict))\n",
        "\n",
        "##interpretation"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
